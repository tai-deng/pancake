import GameManager from "../gamecore/managers/GameManager";
import Over from "./Over";
import Game from "../Game/Game";
import StateManage from "../StateManage/StateManage";
import Jewel from "../Jewels/Jewels";
import Json from "../Json/Json";

const {ccclass, property} = cc._decorator;
// 手臂类执行体
@ccclass
export default class Action extends cc.Component {

    @property(cc.Node)
    pancake:Array<cc.Node> = [];
    @property(cc.Node)
    terrace:cc.Node = null;
    @property(cc.Node)
    arm:cc.Node = null;
    @property(cc.Node)
    jewels:cc.Node = null;

    public score:cc.Node = null;
    private _isTouching:boolean = false;

    onLoad(){
        this.initialize();
        StateManage.instance.on("change", this.stateChangeHandler, this);
    }
    start(){
        this.node.parent.on(cc.Node.EventType.TOUCH_START, this.touchStartHandler, this);
        this.node.parent.on(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
    }
    // 初始化钢体
    initialize():void{
        this.pancake = this.node.getChildByName("pancakeNode").children;
        this.score = this.node.parent.getChildByName("describe").getChildByName("score");
        this.terrace = this.node.getChildByName("hands").getChildByName("pot").getChildByName("terrace");
        this.arm = this.node.getChildByName("hands").getChildByName("bigArm");
        this.jewels = this.node.getChildByName("jewels");

        this.pancake.forEach(element => {
            let temp = element.getComponent(cc.RigidBody)
            temp.enabledContactListener = true;
            temp.onBeginContact = this.onBeginContact;
        });
    }
    // 饼碰撞开始
    private onBeginContact(contact:cc.PhysicsContact,selfCollider:cc.PhysicsCollider,otherCollider:cc.PhysicsCollider){
        let tag:number = otherCollider["tag"];
        // 碰撞到锅
        if(tag != 100){
            contact.disabled = true;
            StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,1);
        }
        // 碰撞到钻石
        if(tag == 200 ){
            let score = Number(StateManage.instance.getData(StateManage.KEY_SCORE)) + 50;
            StateManage.instance.setData(StateManage.KEY_SCORE,score);
            StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,2);
        }
    }
    // 加力动作
    public strength(){
        this.arm.getComponent(cc.RigidBody).applyLinearImpulse(new cc.Vec2(1000, 0), new cc.Vec2(0, 0), true);
    }
    // 检测
    public crash(){
        if(this.pancake[5]){
            let pans = this.pancake[5].getComponent(cc.RigidBody).getWorldCenter();
            let pot = this.terrace.getComponent(cc.RigidBody).getWorldCenter();
            if(pans.y < pot.y-50){
                Over.instance.show();
            }
        }
    }
    // 开始触摸
    private touchStartHandler(e:cc.Event):void {
        this._isTouching = true;
        this.changeSkin();
    }
    // 触摸结束
    private touchEndHandler(e:cc.Event):void {
        this._isTouching = false;
    }
    // 改变皮肤 
    changeSkin(){
        let res = new Json().skins;
        let newSkin = res[StateManage.instance.skin];
        let currentBigArm = cc.url.raw(newSkin["bigArm"]);
        let currentLittleArm = cc.url.raw(newSkin["lowerArm"]);
        let currentPot = cc.url.raw(newSkin["hand"]);

        

        this.arm.getChildByName("arm1").getComponent(cc.Sprite).spriteFrame.setTexture(currentBigArm);
        this.node.getChildByName("hands").getChildByName("littleArm").getChildByName("arm2").getComponent(cc.Sprite).spriteFrame.setTexture(currentLittleArm);
        this.node.getChildByName("hands").getChildByName("pot").getChildByName("potImg").getComponent(cc.Sprite).spriteFrame.setTexture(currentPot);
        cc.log(this.node)
    }
    // 数据值监控
    private stateChangeHandler(e:cc.Event):void {
        let key:string = StateManage.instance.lastChangedKey;
        if (key == StateManage.KEY_JEWEL_STATE && StateManage.instance.jewel == 1) {
            this.jewels.getComponent(Jewel).create();
        }
        if (key == StateManage.KEY_JEWEL_STATE && StateManage.instance.jewel == 2) {
            this.jewels.active = false;
        }
        if (key == StateManage.KEY_SCORE) {
            this.score.getComponent(cc.Label).string = StateManage.instance.getData(StateManage.KEY_SCORE);
        }
        if (key == StateManage.KEY_SKIN) {
            // this.changeSkin();
            cc.log("!!!!!!@@@@@@@@@@@@!!!!!!!!!")
        }
    }
    update (dt) {
        if (this._isTouching) {
           this.strength();
        }
       this.crash();
    }


    onDestroy() {
        StateManage.instance.off("change", this.stateChangeHandler);
    }
}
