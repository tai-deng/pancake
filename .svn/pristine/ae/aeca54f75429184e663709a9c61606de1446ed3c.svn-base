"use strict";
cc._RF.push(module, 'c7507Fi6WtEFaN0ftI9FMyl', 'interludeAnimation');
// Script/interludeAnimation/interludeAnimation.ts

// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var InterludeAnimation = /** @class */ (function (_super) {
    __extends(InterludeAnimation, _super);
    function InterludeAnimation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clickAnim = null;
        _this.notimeAnim = null;
        _this.surpassNode = null;
        _this.countDown = 3;
        _this.count = 0;
        return _this;
        // update (dt) {}
    }
    // onLoad () {}
    InterludeAnimation.prototype.start = function () {
        if (!this._isOnLoadCalled)
            return;
        this.node.on(cc.Node.EventType.TOUCH_END, this.countEvent, this);
        this.schedule(this.onAnimo, 1);
    };
    InterludeAnimation.prototype.onAnimo = function () {
        this.notimeAnim.node.active = true;
        this.clickAnim.node.active = true;
        this.surpassNode.active = false;
        this.notimeAnim.play();
        this.clickAnim.play();
        this.countDown -= 1;
        if (this.countDown == 0) {
            this.node.off(cc.Node.EventType.TOUCH_END, this.countEvent, this);
            this.unschedule(this.onAnimo);
            this.notimeAnim.stop();
            this.clickAnim.stop();
            this.notimeAnim.node.active = false;
            this.clickAnim.node.active = false;
            this.surpassNode.active = true;
            if (this.count >= 4) {
                // 执行背景图下行 4 动作    1334
                var action = cc.speed(cc.sequence(cc.moveBy(1, 0, -1334 * 4).easing(cc.easeCubicActionOut()), cc.moveBy(1, 0, 1334 * 4).easing(cc.easeCubicActionIn())), 1);
                this.surpassNode.runAction(action);
            }
            if (this.count == 3) {
                var action = cc.speed(cc.sequence(cc.moveBy(1, 0, -1334 * 3).easing(cc.easeCubicActionOut()), cc.moveBy(1, 0, 1334 * 3).easing(cc.easeCubicActionIn())), 1);
                this.surpassNode.runAction(action);
            }
            if (this.count == 2) {
                var action = cc.speed(cc.sequence(cc.moveBy(1, 0, -1334 * 2).easing(cc.easeCubicActionOut()), cc.moveBy(1, 0, 1334 * 2).easing(cc.easeCubicActionIn())), 1);
                this.surpassNode.runAction(action);
            }
            if (this.count == 1) {
                var action = cc.speed(cc.sequence(cc.moveBy(1, 0, -1334).easing(cc.easeCubicActionOut()), cc.moveBy(1, 0, 1334).easing(cc.easeCubicActionIn())), 1);
                this.surpassNode.runAction(action);
            }
        }
    };
    InterludeAnimation.prototype.countEvent = function () {
        this.count += 1;
    };
    __decorate([
        property(cc.Animation)
    ], InterludeAnimation.prototype, "clickAnim", void 0);
    __decorate([
        property(cc.Animation)
    ], InterludeAnimation.prototype, "notimeAnim", void 0);
    __decorate([
        property(cc.Node)
    ], InterludeAnimation.prototype, "surpassNode", void 0);
    InterludeAnimation = __decorate([
        ccclass
    ], InterludeAnimation);
    return InterludeAnimation;
}(cc.Component));
exports.default = InterludeAnimation;

cc._RF.pop();