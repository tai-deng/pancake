"use strict";
cc._RF.push(module, 'a54eaeAWylK1JFbdaxHKGpm', 'Over');
// Script/commands/Over.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 展示游戏结果
 */
var Over = /** @class */ (function (_super) {
    __extends(Over, _super);
    function Over() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.off = null;
        _this.reset = null;
        _this.share = null;
        return _this;
    }
    Over_1 = Over;
    Object.defineProperty(Over, "instance", {
        get: function () {
            if (!Over_1._instance)
                Over_1._instance = new Over_1();
            return Over_1._instance;
        },
        enumerable: true,
        configurable: true
    });
    Over.prototype.initialize = function (node) {
        this.scene = node;
        this.off = node.getChildByName("off");
        this.reset = node.getChildByName("reset");
        this.share = node.getChildByName("share");
    };
    /**
     * show
     */
    Over.prototype.show = function () {
        cc.find("Canvas/over").active = true;
        cc.find("Canvas/over").zIndex = 10;
        cc.find("Canvas/PageTop").zIndex = 11;
        cc.find("Canvas/PageTop/grade").active = true;
        var score = StateManage_1.default.instance.getData(StateManage_1.default.KEY_SCORE);
        cc.find("Canvas/over/content/currentScore/Label").getComponent(cc.Label).string = score;
        cc.find("Canvas/PageTop/grade/Label").getComponent(cc.Label).string = score;
    };
    Over.prototype.hidden = function () {
        cc.find("Canvas/over").active = false;
        cc.find("Canvas/PageTop/grade").active = false;
        cc.log("执行~~~~1");
    };
    // 使用复活卡
    Over.prototype.useReviveCar = function () {
        cc.log("使用复活卡");
    };
    // 看视频继续游戏
    Over.prototype.keepUpGema = function () {
        cc.log("看视频继续游戏");
        this.hidden();
    };
    // 重新开始游戏
    Over.prototype.resetGame = function () {
        // this.node.parent.removeChild(this.node,true);
        this.hidden();
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_ISOVER, 0);
        cc.log("重新开始游戏");
    };
    Over.prototype.onLoad = function () {
        // StateManage.instance.on("change", this.stateChangeHandler, this);
    };
    // 数据值监控
    Over.prototype.stateChangeHandler = function (e) {
        /* let key:string = StateManage.instance.lastChangedKey;
        // 监控游戏是否结束 1 游戏结束展示页面 2 隐藏游戏结束页面
        if (key == StateManage.KEY_ISOVER && StateManage.instance.isOver == 1) {
        } */
    };
    Over.prototype.onDestroy = function () {
        // StateManage.instance.off("change", this.stateChangeHandler);
    };
    Over._instance = null;
    __decorate([
        property(cc.Node)
    ], Over.prototype, "off", void 0);
    __decorate([
        property(cc.Node)
    ], Over.prototype, "reset", void 0);
    __decorate([
        property(cc.Node)
    ], Over.prototype, "share", void 0);
    Over = Over_1 = __decorate([
        ccclass
    ], Over);
    return Over;
    var Over_1;
}(cc.Component));
exports.default = Over;

cc._RF.pop();