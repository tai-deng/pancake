import StateManage from "../StateManage/StateManage";
import WXCore from "../gamecore/wechat/WXCore";
import GameManager from "../gamecore/managers/GameManager";
import GameEventNames from "../GameEventNames";

const {ccclass, property} = cc._decorator;

@ccclass
export default class Goods extends cc.Component {
    // 配置
    public deploy:any = null;
    private sumShop:Array<cc.Node> = null;
    private shopPrice:number = null;

    // item 按钮
    public itemBtn(event:cc.Event, data){
        let item = event.target;
        if(this.deploy.isBuy==1){
            if(this.deploy.isUse == 1){
                WXCore.showToast("皮肤已在使用中");
            }else if(this.deploy.isUse == 2){
                cc.find("use",item).active = false;
                cc.find("inUse",item).active = true;
                this.ergodic();
                this.deploy.isUse = 1;
                WXCore.showToast("使用成功!")
                StateManage.instance.setData(StateManage.KEY_SKIN,this.deploy.skinsRes);
                cc.log(this.deploy.skinsRes,2)
            }
        }else if(this.deploy.isBuy == 2){
            if(this.deploy.waitBuy == 1){
                let title:string = "确认购买?";
                let script:Goods = this;
                let callback:Function = function(label:string):void {
                    cc.info(label)
                    if (label == "ok") {
                        script.affirmBuy();
                    }
                    if(label == "off"){}
                }
                GameManager.eventManager.dispatchEventWith(GameEventNames.SHOW_ALERT, [title, callback])

                StateManage.instance.setData(StateManage.KEY_TRADE,this.deploy);

            }else if(this.deploy.waitBuy == 2){
                WXCore.showToast("购买上一个皮肤后解锁")
            }
        }
    }
    // 遍历改变商品
    private ergodic(){
        this.sumShop = this.node.parent.children;
        this.sumShop.forEach(el =>{
            if(el.getComponent("Goods").deploy.isUse == 1){
                cc.find("use",el).active = true;
                cc.find("inUse",el).active = false;
                el.getComponent("Goods").deploy.isUse = 2;
            }
        })
    }
    // 取消购买
    public cancelBuy(event, customEventData){
        cc.log("取消购买");
    }
    // 确认购买
    public affirmBuy(){
        let myGem = StateManage.instance.getData(StateManage.KEY_GEM);
        let trade = StateManage.instance.getData(StateManage.KEY_TRADE);
        let shopPrice = Number(trade.price)
        let showInfo = '';
        cc.log(shopPrice)
        if(myGem >=shopPrice){
            let surplus = (myGem - shopPrice) <= 0 ? 0 :(myGem - shopPrice);
            StateManage.instance.setData(StateManage.KEY_GEM,surplus);
            showInfo = "购买成功，同时解锁了新购买项！";
            cc.log("购买成功",shopPrice)
            // 购买成功解锁并使用当前皮肤 让下一个皮肤待解锁 msk
            let sumShop = cc.find("Canvas").getComponent("shopping").container.children;
            var currentInd = 0;
            for(let i = 0;i < sumShop.length; ++i){
                if(sumShop[i].getComponent("Goods").deploy.isBuy == 1){
                    cc.find("use",sumShop[i]).active = true;
                    cc.find("inUse",sumShop[i]).active = false;
                    sumShop[i].getComponent("Goods").deploy.isUse = 2;
                }
                if(trade.id == sumShop[i].getComponent("Goods").deploy.id){
                    currentInd = i;
                    sumShop[i].getComponent("Goods").deploy.isBuy = 1;
                    sumShop[i].getComponent("Goods").deploy.isUse = 1;
                    sumShop[i].getComponent("Goods").deploy.waitBuy = 1;
                    cc.find("use",sumShop[i]).active = false;
                    cc.find("inUse",sumShop[i]).active = true;
                    cc.find("price",sumShop[i]).active = false;
                    cc.find("prop",sumShop[i]).active = true;
                    cc.find("lock",sumShop[i]).active = false;
                    cc.find("msk",sumShop[i]).active = false;
                    StateManage.instance.setData(StateManage.KEY_SKIN,sumShop[i].getComponent("Goods").deploy.skinsRes);
                    cc.log(sumShop[i].getComponent("Goods").deploy.skinsRes,3)
                }
            }
            let wait:cc.Node = sumShop[currentInd+1];
            cc.find("use",wait).active = false;
            cc.find("inUse",wait).active = false;
            cc.find("price",wait).active = true;
            cc.find("prop",wait).active = true;
            cc.find("lock",wait).active = false;
            cc.find("msk",wait).active = true;
            wait.getComponent("Goods").deploy.waitBuy = 1;
            let price = cc.find("price/money",wait).getComponent(cc.Label).string;
            if(myGem >= price){
                wait.color = new cc.Color(17, 30, 131);
            }else{
                wait.color = new cc.Color(141, 22, 26);
            }
            if(wait.getComponent("Goods").deploy.newPro == 1){
                cc.find("newPro",wait).active = true;
            }else{
                cc.find("newPro",wait).active = false;
            }
        }else{
            showInfo = "宝石不足";
            cc.log("购买失败",shopPrice)
        }
        WXCore.showToast(showInfo)
    }
    // onLoad () {
    // }

    // start () {
    // }

    // update (dt) {}
}
