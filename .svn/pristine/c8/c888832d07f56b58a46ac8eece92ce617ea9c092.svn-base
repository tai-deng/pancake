"use strict";
cc._RF.push(module, 'f3b9dUxSwhK7Ly101SQm345', 'Goods');
// Script/shopping/Goods.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var WXCore_1 = require("../gamecore/wechat/WXCore");
var GameManager_1 = require("../gamecore/managers/GameManager");
var GameEventNames_1 = require("../GameEventNames");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Goods = /** @class */ (function (_super) {
    __extends(Goods, _super);
    function Goods() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // 配置
        _this.deploy = null;
        _this.sumShop = null;
        _this.shopPrice = null;
        return _this;
        // onLoad () {
        // }
        // start () {
        // }
        // update (dt) {}
    }
    // item 按钮
    Goods.prototype.itemBtn = function (event, data) {
        var item = event.target;
        if (this.deploy.isBuy == 1) {
            if (this.deploy.isUse == 1) {
                WXCore_1.default.showToast("皮肤已在使用中");
            }
            else if (this.deploy.isUse == 2) {
                cc.find("use", item).active = false;
                cc.find("inUse", item).active = true;
                this.ergodic();
                this.deploy.isUse = 1;
                WXCore_1.default.showToast("使用成功!");
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_SKIN, this.deploy.skinsRes);
                cc.log(this.deploy.skinsRes, 2);
            }
        }
        else if (this.deploy.isBuy == 2) {
            if (this.deploy.waitBuy == 1) {
                var title = "确认购买?";
                var script_1 = this;
                var callback = function (label) {
                    cc.info(label);
                    if (label == "ok") {
                        script_1.affirmBuy();
                    }
                    if (label == "off") { }
                };
                GameManager_1.default.eventManager.dispatchEventWith(GameEventNames_1.default.SHOW_ALERT, [title, callback]);
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_TRADE, this.deploy);
            }
            else if (this.deploy.waitBuy == 2) {
                WXCore_1.default.showToast("购买上一个皮肤后解锁");
            }
        }
    };
    // 遍历改变商品
    Goods.prototype.ergodic = function () {
        this.sumShop = this.node.parent.children;
        this.sumShop.forEach(function (el) {
            if (el.getComponent("Goods").deploy.isUse == 1) {
                cc.find("use", el).active = true;
                cc.find("inUse", el).active = false;
                el.getComponent("Goods").deploy.isUse = 2;
            }
        });
    };
    // 取消购买
    Goods.prototype.cancelBuy = function (event, customEventData) {
        cc.log("取消购买");
    };
    // 确认购买
    Goods.prototype.affirmBuy = function () {
        var myGem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
        var trade = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TRADE);
        var shopPrice = Number(trade.price);
        var showInfo = '';
        cc.log(shopPrice);
        if (myGem >= shopPrice) {
            var surplus = (myGem - shopPrice) <= 0 ? 0 : (myGem - shopPrice);
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, surplus);
            showInfo = "购买成功，同时解锁了新购买项！";
            cc.log("购买成功", shopPrice);
            // 购买成功解锁并使用当前皮肤 让下一个皮肤待解锁 msk
            var sumShop = cc.find("Canvas").getComponent("shopping").container.children;
            var currentInd = 0;
            for (var i = 0; i < sumShop.length; ++i) {
                if (sumShop[i].getComponent("Goods").deploy.isBuy == 1) {
                    cc.find("use", sumShop[i]).active = true;
                    cc.find("inUse", sumShop[i]).active = false;
                    sumShop[i].getComponent("Goods").deploy.isUse = 2;
                }
                if (trade.id == sumShop[i].getComponent("Goods").deploy.id) {
                    currentInd = i;
                    sumShop[i].getComponent("Goods").deploy.isBuy = 1;
                    sumShop[i].getComponent("Goods").deploy.isUse = 1;
                    sumShop[i].getComponent("Goods").deploy.waitBuy = 1;
                    cc.find("use", sumShop[i]).active = false;
                    cc.find("inUse", sumShop[i]).active = true;
                    cc.find("price", sumShop[i]).active = false;
                    cc.find("prop", sumShop[i]).active = true;
                    cc.find("lock", sumShop[i]).active = false;
                    cc.find("msk", sumShop[i]).active = false;
                    StateManage_1.default.instance.setData(StateManage_1.default.KEY_SKIN, sumShop[i].getComponent("Goods").deploy.skinsRes);
                    cc.log(sumShop[i].getComponent("Goods").deploy.skinsRes, 3);
                }
            }
            var wait = sumShop[currentInd + 1];
            cc.find("use", wait).active = false;
            cc.find("inUse", wait).active = false;
            cc.find("price", wait).active = true;
            cc.find("prop", wait).active = true;
            cc.find("lock", wait).active = false;
            cc.find("msk", wait).active = true;
            wait.getComponent("Goods").deploy.waitBuy = 1;
            var price = cc.find("price/money", wait).getComponent(cc.Label).string;
            if (myGem >= price) {
                wait.color = new cc.Color(17, 30, 131);
            }
            else {
                wait.color = new cc.Color(141, 22, 26);
            }
            if (wait.getComponent("Goods").deploy.newPro == 1) {
                cc.find("newPro", wait).active = true;
            }
            else {
                cc.find("newPro", wait).active = false;
            }
        }
        else {
            showInfo = "宝石不足";
            cc.log("购买失败", shopPrice);
        }
        WXCore_1.default.showToast(showInfo);
    };
    Goods = __decorate([
        ccclass
    ], Goods);
    return Goods;
}(cc.Component));
exports.default = Goods;

cc._RF.pop();