
import Config from "../StateManage/StateManage";
import GameManager from "../gamecore/managers/GameManager";
import GameOverCommand from "../commands/GameOverCommand";
import Action from "../commands/Action";
import StateManage from "../StateManage/StateManage";
import GameSystem from "../GameSystem";
import GameEventNames from "../GameEventNames";
const {ccclass, property} = cc._decorator;


/**
 * 游戏场景脚本
 * 
 */
@ccclass
export default class Game extends cc.Component {

    @property(cc.Node)
    homeBar:cc.Node = null;
    @property(cc.Node)
    animNode:cc.Node
    @property(cc.Animation)
    anim:cc.Animation;

    private _isTouching:boolean = false;
    public static actionPrefab:Boolean = false;

    private _actionNode:cc.Node;

    onLoad () {
        //初始化系统
        GameSystem.init();

        //初始化物理系统
        cc.director.getPhysicsManager().enabled = true;
        cc.director.getPhysicsManager().debugDrawFlags = 1;

        let script:Game = this;
        this.animNode.active = false;
        if(!Game.actionPrefab){
            cc.loader.loadRes("gameScene/action", function(err, prefab){
                Game.actionPrefab = prefab;
                script._actionNode = cc.instantiate(prefab);

                cc.info("######################");
                cc.info(script._actionNode);
                script.node.addChild(script._actionNode);
            });
            /* cc.loader.loadRes("over", function(err, prefab){
                let newNode:cc.Node = cc.instantiate(prefab);
                script.node.addChild(newNode);
                newNode.active = false;
                Over.instance.initialize(newNode);
            }); */
        }
    }

    // 打鸡蛋
    private playEgg(){
        this.animNode.active = true;
        this.anim.play("animotion");
    }
    // 移除动画
    private Finished(){
        this.animNode.active = false;
    }
    // 返回首页
    private homePage(e:cc.Event):void {
        cc.director.loadScene("indexSence");
    }
    start () {
        this.homeBar.on(cc.Node.EventType.TOUCH_END, this.homePage, this);
        this.anim.on("finished",this.Finished, this);
        // GameManager.context.mapEvent("gameover", GameOverCommand);
    }
    // update (dt) {
    // }
    private stateChangeHandler(e:cc.Event):void {
        let key:string = StateManage.instance.lastChangedKey;
        
    }
    onDestroy() {
        StateManage.instance.off("change", this.stateChangeHandler);
    }
}
