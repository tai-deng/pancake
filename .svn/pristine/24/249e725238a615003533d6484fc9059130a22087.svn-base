"use strict";
cc._RF.push(module, 'ddac7RZgRZNE4KZKupiSmvK', 'SceneManager');
// Script/gamecore/scene/SceneManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../managers/GameManager");
var LoadingSceneMain_1 = require("./LoadingSceneMain");
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 场景管理器
 */
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        //场景队列
        this._sceneStack = [];
        //开始加载的时间（毫秒）
        this._startLoadingTime = 0;
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        // cc.info("GameManager.sceneManager", GameManager.sceneManager);
        // if (GameManager.sceneManager) {
        //     throw new Error("Please use GameManager.sceneManager");
        // }
    }
    SceneManager_1 = SceneManager;
    Object.defineProperty(SceneManager.prototype, "currentSceneName", {
        /**
         * 获取当前场景名称
         */
        get: function () {
            return this._currentSceneName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 推入场景
     *
     * @param sceneName 场景名称
     */
    SceneManager.prototype.pushScene = function (sceneName) {
        this._sceneStack.push(sceneName);
        this.loadScene(sceneName);
    };
    /**
     * 预加载场景
     *
     * @param sceneName 场景名称
     */
    SceneManager.prototype.preloadScene = function (sceneName, success, fail) {
        if (success === void 0) { success = null; }
        if (fail === void 0) { fail = null; }
        //预加载场景
        cc.director.preloadScene(sceneName, function (err) {
            cc.info("err", err);
            if (!err) {
                if (success != null)
                    success.call(null);
            }
            else {
                cc.info("场景" + GameManager_1.default.sceneManager.currentSceneName + "加载失败");
                if (fail != null)
                    fail.call(null);
            }
        });
    };
    /**
     * 推出场景，回到上一个场景
     */
    SceneManager.prototype.popScene = function () {
        if (this._sceneStack.length > 1) {
            var v = this._sceneStack.pop();
            var toScene = this._sceneStack[this._sceneStack.length - 1];
            this.loadScene(toScene);
            return v;
        }
        return null;
    };
    /**
     * 重置
     *
     */
    SceneManager.prototype.reset = function () {
        this._sceneStack = [];
        this._currentSceneName = null;
    };
    /**
     * 加载场景
     *
     * @param sceneName
     */
    SceneManager.prototype.loadScene = function (sceneName) {
        if (this._currentSceneName == sceneName)
            return;
        //如果有设置加载场景
        if (this.loadingSceneName) {
            //不能同时加载多个场景
            if (this._isLoading)
                return;
            this._currentSceneName = sceneName;
            this.showLoadingScene();
            //预加载场景
            cc.director.preloadScene(sceneName, function (err) {
                cc.info("err", err);
                if (!err) {
                    GameManager_1.default.sceneManager.sceneLoadedCallback(sceneName);
                }
                else {
                    cc.info("场景" + GameManager_1.default.sceneManager.currentSceneName + "加载失败");
                    //返回到上一个场景
                    GameManager_1.default.sceneManager._isLoading = false;
                    GameManager_1.default.sceneManager.popScene();
                }
            });
        }
        else {
            this._currentSceneName = sceneName;
            cc.director.loadScene(sceneName);
        }
    };
    /**
     * 场景加载完毕回调
     *
     * @param sceneName 加载的场景名
     */
    SceneManager.prototype.sceneLoadedCallback = function (sceneName) {
        if (this._currentSceneName != sceneName)
            return;
        //检查最小时间
        var now = new Date().getTime();
        cc.info(now - this._startLoadingTime);
        if (now - this._startLoadingTime < SceneManager_1.MIN_LOADING_TIME) {
            setTimeout(function () {
                GameManager_1.default.sceneManager.sceneLoadedCallback(sceneName);
            }, 1000);
            return;
        }
        //====================================================================
        //尝试将加载场景通过动画方式移除
        //====================================================================
        //移除加载场景
        var canvas = cc.find("Canvas");
        if (canvas) {
            var loadingScript = canvas.getComponent(LoadingSceneMain_1.default);
            if (loadingScript) {
                cc.info("【sceneLoadedCallback】释放加载场景");
                loadingScript.doPreDestory(0.3);
                setTimeout(function () {
                    GameManager_1.default.sceneManager.showCurrentScene();
                }, 400);
                return;
            }
        }
        //====================================================================
        this.showCurrentScene();
    };
    /**
     * 显示当前场景
     */
    SceneManager.prototype.showCurrentScene = function () {
        this._isLoading = false;
        cc.director.loadScene(this._currentSceneName);
    };
    Object.defineProperty(SceneManager.prototype, "isLoading", {
        /**
         * 是否正在加载场景
         */
        get: function () {
            return this._isLoading;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 显示加载场景
     */
    SceneManager.prototype.showLoadingScene = function () {
        //记录开始显示加载场景的时间
        this._startLoadingTime = new Date().getTime();
        if (this._isLoading)
            return;
        this._isLoading = true;
        cc.director.loadScene(this.loadingSceneName);
    };
    //加载场景最小显示时间(毫秒)
    SceneManager.MIN_LOADING_TIME = 2000;
    SceneManager = SceneManager_1 = __decorate([
        ccclass
    ], SceneManager);
    return SceneManager;
    var SceneManager_1;
}());
exports.default = SceneManager;

cc._RF.pop();