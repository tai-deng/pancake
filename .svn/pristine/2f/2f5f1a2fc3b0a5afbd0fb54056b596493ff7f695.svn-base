(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/Script/gamecore/managers/PopUpManager.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, 'a385bbYdJpEPI+qXxNTQmtC', 'PopUpManager', __filename);
// Script/gamecore/managers/PopUpManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
var TweenLite_1 = require("../libs/TweenLite");
var EasePack_1 = require("../libs/EasePack");
var GameManager_1 = require("./GameManager");
var GameCoreEvent_1 = require("../GameCoreEvent");
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var PopUpManager = /** @class */ (function (_super) {
    __extends(PopUpManager, _super);
    function PopUpManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._popUpMap = {};
        return _this;
    }
    /**
     * 创建背景
     */
    PopUpManager.prototype.createPopUpBg = function () {
        var winSize = cc.director.getWinSize();
        var bg = new cc.Node();
        bg.width = winSize.width;
        bg.height = winSize.height;
        var ctx = bg.addComponent(cc.Graphics);
        ctx.fillColor = new cc.Color(0, 0, 0, 160);
        // ctx.fillColor = cc.Color.RED;
        ctx.lineWidth = 0;
        ctx.fillRect(0, 0, winSize.width, winSize.height);
        ctx.stroke();
        // bg.color = cc.Color.BLACK;
        // bg.opacity = 30;
        bg.addComponent(cc.BlockInputEvents);
        return bg;
    };
    /**
     * 弹出内容
     *
     * @param node
     */
    PopUpManager.prototype.addPopUp = function (node, modal) {
        if (modal === void 0) { modal = true; }
        var udid = node.uuid;
        var winSize = cc.director.getWinSize();
        if (modal) {
            var bg = this.createPopUpBg();
            bg.y = winSize.height / 2;
            bg.x = winSize.width / 2;
            cc.director.getScene().addChild(bg);
            this._popUpMap[udid] = bg;
        }
        node.x = winSize.width / 2;
        node.y = winSize.height / 2;
        cc.director.getScene().addChild(node);
        var toScale = Math.min(winSize.width * 0.75 / node.width, winSize.height * 0.8 / node.height);
        node.scale = 0.5;
        TweenLite_1.TweenLite.to(node, 0.5, { "scale": toScale, "ease": EasePack_1.Back.easeOut });
        //添加事件
        node.on(GameCoreEvent_1.default.COMMON_CLOSE, this.nodeCloseEventHandler, this);
        //播放音效
        GameManager_1.default.soundsManager.playSound(GameManager_1.default.soundsManager.popUpSoundSource);
    };
    /**
     * node关闭事件控制
     *
     * @param evt
     */
    PopUpManager.prototype.nodeCloseEventHandler = function (evt) {
        var node = evt.currentTarget;
        this.removePopUp(node);
    };
    /**
     * 移除弹出
     *
     * @param node
     */
    PopUpManager.prototype.removePopUp = function (node) {
        if (!node)
            return;
        if (this._popUpMap[node.uuid]) {
            node.off(GameCoreEvent_1.default.COMMON_CLOSE, this.nodeCloseEventHandler);
            var bg = this._popUpMap[node.uuid];
            delete this._popUpMap[node.uuid];
            var obj = { "scale": node.scale, "opacity": node.opacity };
            TweenLite_1.TweenLite.to(obj, 0.3, {
                "scale": 0.5,
                "opacity": 0,
                "onUpdate": function (node, obj) {
                    if (node && node.parent) {
                        node.scale = obj["scale"];
                        node.opacity = obj["opacity"];
                    }
                },
                "onUpdateParams": [node, obj],
                "onComplete": function (node, bg) {
                    if (node && node.parent) {
                        node.removeFromParent();
                    }
                    if (bg && bg.parent) {
                        bg.removeFromParent();
                    }
                },
                "onCompleteParams": [node, bg]
            });
        }
    };
    PopUpManager = __decorate([
        ccclass
    ], PopUpManager);
    return PopUpManager;
}(cc.EventTarget));
exports.default = PopUpManager;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=PopUpManager.js.map
        