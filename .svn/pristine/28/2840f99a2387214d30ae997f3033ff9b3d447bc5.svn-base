(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/assets/Script/gamecore/managers/UtilsManager.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {"use strict";
cc._RF.push(module, '9f7c0EPgJBJLb2asY1+y12v', 'UtilsManager', __filename);
// Script/gamecore/managers/UtilsManager.ts

// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TweenLite_1 = require("../libs/TweenLite");
/**
 * 游戏功能管理。比如震动关闭、开启
 */
var UtilsManager = /** @class */ (function (_super) {
    __extends(UtilsManager, _super);
    /**
     *
     */
    function UtilsManager() {
        var _this = _super.call(this) || this;
        //==============================================================
        _this._labelToTweenMap = {};
        return _this;
    }
    Object.defineProperty(UtilsManager.prototype, "iphoneXTopBarHeight", {
        //============================================================================
        //iphone x 顶部条高度
        get: function () {
            return 44;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UtilsManager.prototype, "isIphoneX", {
        /**
         * 检查是否是iphoneX
         *
         */
        get: function () {
            try {
                return /iphone/gi.test(navigator.userAgent) && (screen.height == 812 && screen.width == 375);
            }
            catch (error) {
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    // private _lockSenceNode:cc.Node;
    // /**
    //  * 锁定场景
    //  */
    // lockSence():void {
    // }
    // /**
    //  * 解除锁定舞台
    //  */
    // unlockSence():void {
    // }
    /**
     * 将cocos中canvas的rect数据转换为屏幕中的rect数据
     *
     * @param rect
     */
    UtilsManager.prototype.toScreenRect = function (rect) {
        // cc.info("!!!!!!!!!!!!!!!!!!!!!!");
        var winSize = cc.director.getWinSize();
        var newRect = rect.clone();
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height, newRect.xMin, newRect.yMax);
        //转换为左上角作为(0, 0)点的坐标
        newRect.x = rect.xMin;
        newRect.y = winSize.height - newRect.yMax;
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        //获取屏幕尺寸
        var screenSize = cc.view.getFrameSize();
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        // cc.info(screenSize.width, screenSize.height);
        //计算缩放比例
        //TODO:NEXT，需要检查canvas的适配策略
        var s = screenSize.height / winSize.height;
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", s);
        newRect.x *= s;
        newRect.y *= s;
        newRect.width *= s;
        newRect.height *= s;
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        return newRect;
    };
    /**
     * 将屏幕中的矩形区域，转换为cocos中canvas的矩形区域
     *
     * @param rect
     */
    UtilsManager.prototype.fromScreenRect = function (rect) {
        // cc.info("!!!!!!!!!!!!!!!!!!!!!!");
        // cc.info("fromScreenRect");
        var winSize = cc.director.getWinSize();
        var newRect = rect.clone();
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        //获取屏幕尺寸
        var screenSize = cc.view.getFrameSize();
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        // cc.info(screenSize.width, screenSize.height);
        newRect.y = screenSize.height - newRect.y - newRect.height;
        //计算缩放比例
        //TODO:NEXT，需要检查canvas的适配策略
        var s = screenSize.height / winSize.height;
        newRect.x /= s;
        newRect.y /= s;
        newRect.width /= s;
        newRect.height /= s;
        var canvasRect = new cc.Rect(newRect.x, newRect.y, newRect.width, newRect.height);
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", s);
        // cc.info(canvasRect.x, canvasRect.y, canvasRect.width, canvasRect.height)
        return canvasRect;
    };
    /**
     * 将cocos的资源路径转换为微信小游戏的资源路径。
     *
     * @param resourcePath
     */
    UtilsManager.prototype.toWechatMiniGameResourcePath = function (resourcePath) {
        if (resourcePath.charAt(0) == "/")
            resourcePath = resourcePath.substr(1);
        return "res/raw-assets/" + resourcePath;
    };
    /**
     * 将一个label的值增加到或减少到另外一个值。
     * 比如是整数。
     *
     * @param label
     * @param v
     * @param duration          动画时间
     */
    UtilsManager.prototype.labelStringToValue = function (label, v, duration) {
        if (duration === void 0) { duration = 0.5; }
        var uuid = label.uuid;
        var tween = this._labelToTweenMap[uuid];
        if (tween)
            tween.kill();
        var currentV = parseInt(label.string);
        if (isNaN(currentV))
            currentV = 0;
        var step = (currentV > v) ? -1 : 1;
        var obj = { "v": currentV };
        tween = TweenLite_1.TweenLite.to(obj, duration, {
            "v": v,
            "onUpdate": function (obj) {
                var v = Math.floor(obj["v"]);
                label.string = "" + v;
            },
            "onUpdateParams": [obj]
        });
    };
    UtilsManager = __decorate([
        ccclass
    ], UtilsManager);
    return UtilsManager;
}(cc.EventTarget));
exports.default = UtilsManager;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        //# sourceMappingURL=UtilsManager.js.map
        