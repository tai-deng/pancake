"use strict";
cc._RF.push(module, '06cdeg0ua9CoI9+IJsRGEjC', 'Action');
// Script/commands/Action.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var Jewels_1 = require("../Jewels/Jewels");
var Json_1 = require("../Json/Json");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
// 手臂类执行体
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pancake = [];
        _this.terrace = null;
        _this.arm = null;
        _this.jewels = null;
        _this.score = null;
        _this._isTouching = false;
        _this.pancakePos = [];
        return _this;
    }
    Action.prototype.onLoad = function () {
        this.initialize(1);
        StateManage_1.default.instance.on("change", this.stateChangeHandler, this);
    };
    Action.prototype.start = function () {
        this.node.parent.on(cc.Node.EventType.TOUCH_START, this.touchStartHandler, this);
        this.node.parent.on(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
    };
    // 初始化钢体
    Action.prototype.initialize = function (cases) {
        var _this = this;
        // StateManage.instance.setData(StateManage.KEY_CAKEPOS,this.pancakePos);
        if (cases == 1) {
            // this.pancake = cc.instantiate(this.pancakPrefab);
            this.pancake = cc.find("pancakeNode", this.node).children;
            this.score = cc.find("Canvas/describe/score");
            this.terrace = cc.find("hands/pot/terrace", this.node);
            this.arm = cc.find("hands/bigArm", this.node);
            this.jewels = this.node.getChildByName("jewels");
            this.pancake.forEach(function (element) {
                var temp = element.getComponent(cc.RigidBody);
                var pos = element.getPosition();
                _this.pancakePos.push(pos);
                temp.type = 1;
                temp.enabledContactListener = true;
                temp.onBeginContact = _this.onBeginContact;
            });
        }
        else if (cases == 2) {
            this.pancake.forEach(function (element) {
                var temp = element.getComponent(cc.RigidBody);
                temp.type = 2;
            });
        }
        else if (cases == 3) {
            this.pancake.forEach(function (element, index) {
                var temp = element.getComponent(cc.RigidBody);
                element.setPosition(this.pancakePos[index]);
                temp.type = 0;
            }.bind(this));
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_ISOVER, 2);
        }
    };
    // 饼碰撞开始
    Action.prototype.onBeginContact = function (contact, selfCollider, otherCollider) {
        var tag = otherCollider["tag"];
        // 碰撞到锅
        if (tag != 100) {
            contact.disabled = true;
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_JEWEL_STATE, 1);
        }
        // 碰撞到钻石
        if (tag == 200) {
            var score = Number(StateManage_1.default.instance.getData(StateManage_1.default.KEY_SCORE)) + 50;
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_SCORE, score);
            var gem = Number(StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM)) + 1;
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, gem);
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_JEWEL_STATE, 2);
        }
    };
    // 加力动作
    Action.prototype.strength = function () {
        this.arm.getComponent(cc.RigidBody).applyLinearImpulse(new cc.Vec2(1000, 0), new cc.Vec2(0, 0), true);
    };
    // 检测
    Action.prototype.crash = function () {
        if (this.pancake[5] && StateManage_1.default.instance.getData(StateManage_1.default.KEY_ISOVER) == 2) {
            var pans = this.pancake[5].getComponent(cc.RigidBody).getWorldCenter();
            var pot = this.terrace.getComponent(cc.RigidBody).getWorldCenter();
            if (pans.y < pot.y - 50) {
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_ISOVER, 1);
            }
        }
    };
    // 开始触摸
    Action.prototype.touchStartHandler = function (e) {
        this._isTouching = true;
        this.initialize(2);
        this.changeSkin();
    };
    // 触摸结束
    Action.prototype.touchEndHandler = function (e) {
        this._isTouching = false;
    };
    // 改变皮肤 
    Action.prototype.changeSkin = function () {
        var resName = StateManage_1.default.instance.getData(StateManage_1.default.KEY_SKIN);
        var res = new Json_1.default().skins;
        var newSkin = {};
        res.forEach(function (el) {
            if (el["name"] == resName) {
                newSkin = el;
            }
        });
        cc.log(resName, newSkin);
        var currentBigArm = cc.url.raw(newSkin["bigArm"]);
        var currentLittleArm = cc.url.raw(newSkin["lowerArm"]);
        var currentPot = cc.url.raw(newSkin["hand"]);
        this.arm.getChildByName("arm1").getComponent(cc.Sprite).spriteFrame.setTexture(currentBigArm);
        this.node.getChildByName("hands").getChildByName("littleArm").getChildByName("arm2").getComponent(cc.Sprite).spriteFrame.setTexture(currentLittleArm);
        this.node.getChildByName("hands").getChildByName("pot").getChildByName("potImg").getComponent(cc.Sprite).spriteFrame.setTexture(currentPot);
    };
    // 数据值监控
    Action.prototype.stateChangeHandler = function (e) {
        var key = StateManage_1.default.instance.lastChangedKey;
        // 随机宝石
        if (key == StateManage_1.default.KEY_JEWEL_STATE && StateManage_1.default.instance.jewel == 1) {
            this.jewels.getComponent(Jewels_1.default).create();
        }
        if (key == StateManage_1.default.KEY_JEWEL_STATE && StateManage_1.default.instance.jewel == 2) {
            this.jewels.active = false;
        }
        // 当前得分
        if (key == StateManage_1.default.KEY_SCORE) {
            this.score.getComponent(cc.Label).string = StateManage_1.default.instance.getData(StateManage_1.default.KEY_SCORE);
        }
        // 换皮肤
        if (key == StateManage_1.default.KEY_SKIN) {
            // this.changeSkin();
        }
        // 监控游戏是否结束 1 游戏结束展示页面 2 隐藏游戏结束页面
        if (key == StateManage_1.default.KEY_ISOVER && StateManage_1.default.instance.isOver == 1) {
            cc.find("Canvas/over").getComponent('Over').show();
        }
        else if (key == StateManage_1.default.KEY_ISOVER && StateManage_1.default.instance.isOver == 0) {
            this.initialize(3);
        }
    };
    Action.prototype.update = function (dt) {
        if (this._isTouching) {
            this.strength();
        }
        this.crash();
    };
    Action.prototype.onDestroy = function () {
        StateManage_1.default.instance.off("change", this.stateChangeHandler);
    };
    __decorate([
        property(cc.Node)
    ], Action.prototype, "pancake", void 0);
    __decorate([
        property(cc.Node)
    ], Action.prototype, "terrace", void 0);
    __decorate([
        property(cc.Node)
    ], Action.prototype, "arm", void 0);
    __decorate([
        property(cc.Node)
    ], Action.prototype, "jewels", void 0);
    Action = __decorate([
        ccclass
    ], Action);
    return Action;
}(cc.Component));
exports.default = Action;

cc._RF.pop();