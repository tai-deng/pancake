"use strict";
cc._RF.push(module, '154cevcE7hBhZdNbocxIlb0', 'SoundsManager');
// Script/gamecore/managers/SoundsManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var SoundsManager = /** @class */ (function (_super) {
    __extends(SoundsManager, _super);
    /**
     *
     */
    function SoundsManager() {
        var _this = _super.call(this) || this;
        //====================================================================================
        //常用音效设置
        //====================================================================================
        //面板弹出声效素材地址
        _this.popUpSoundSource = null;
        //点击音效
        _this.tapSoundSource = null;
        //====================================================================================
        //场景背景音乐id
        _this.senceBgSoundIDs = [];
        _this.senceBgSoundURLs = [];
        //是否已静音背景音乐
        _this._musicMuted = false;
        //是否已静音特效声音
        _this._soundMuted = false;
        //读取本地数据
        var v = cc.sys.localStorage.getItem("__l__soundsManager_soundMuted");
        if (v == "true") {
            _this.muteSound();
        }
        v = cc.sys.localStorage.getItem("__l__soundsManager_musicMuted");
        if (v == "true") {
            _this.muteMusic();
        }
        return _this;
    }
    //推入场景音乐
    SoundsManager.prototype.pushSenceBgSound = function (sourceURL) {
        var lastURL;
        if (this.senceBgSoundURLs.length > 0) {
            lastURL = this.senceBgSoundURLs[this.senceBgSoundURLs.length - 1];
        }
        if (lastURL != sourceURL) {
            //如果当前有背景音乐，需要暂停
            if (this.senceBgSoundURLs.length > 1) {
                var lastBgSoundID = this.senceBgSoundIDs[this.senceBgSoundIDs.length - 1];
                cc.audioEngine.pause(lastBgSoundID);
            }
            var id = cc.audioEngine.play(cc.url.raw(sourceURL), true, 1);
            this.senceBgSoundIDs.push(id);
            this.senceBgSoundURLs.push(sourceURL);
            this.refreshBgSound();
        }
    };
    //推出场景背景音乐（回到上一个场景的背景音乐）
    SoundsManager.prototype.popSenceBgSound = function () {
        if (this.senceBgSoundURLs.length <= 1)
            return;
        var bgSoundID = this.senceBgSoundIDs.pop();
        cc.audioEngine.pause(bgSoundID);
        this.senceBgSoundURLs.pop();
        bgSoundID = this.senceBgSoundIDs[-1];
        cc.audioEngine.resume(bgSoundID);
        this.refreshBgSound();
    };
    //更新背景音乐
    SoundsManager.prototype.refreshBgSound = function () {
        //如果当前有背景音乐，需要暂停
        if (this.senceBgSoundURLs.length == 0)
            return;
        var lastBgSoundID = this.senceBgSoundIDs[this.senceBgSoundIDs.length - 1];
        console.log("@@@lastBgSoundID", lastBgSoundID);
        if (this._musicMuted) {
            cc.audioEngine.pause(lastBgSoundID);
            cc.audioEngine.setVolume(lastBgSoundID, 0);
        }
        else {
            cc.audioEngine.resume(lastBgSoundID);
            cc.audioEngine.setVolume(lastBgSoundID, 1);
        }
    };
    Object.defineProperty(SoundsManager.prototype, "musicMuted", {
        get: function () {
            return this._musicMuted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundsManager.prototype, "soundMuted", {
        get: function () {
            return this._soundMuted;
        },
        enumerable: true,
        configurable: true
    });
    //静音背景音乐
    SoundsManager.prototype.muteMusic = function () {
        if (this._musicMuted)
            return;
        this._musicMuted = true;
        this.refreshBgSound();
        //本地保存
        cc.sys.localStorage.setItem("__l__soundsManager_musicMuted", this._musicMuted);
    };
    //取消静音背景音乐
    SoundsManager.prototype.unmuteMusic = function () {
        if (!this._musicMuted)
            return;
        this._musicMuted = false;
        this.refreshBgSound();
        //本地保存
        cc.sys.localStorage.setItem("__l__soundsManager_musicMuted", this._musicMuted);
    };
    //静音特效音乐
    SoundsManager.prototype.muteSound = function () {
        if (this._soundMuted)
            return;
        this._soundMuted = true;
        //本地保存
        cc.sys.localStorage.setItem("__l__soundsManager_soundMuted", this._soundMuted);
    };
    //取消静音特效音乐
    SoundsManager.prototype.unmuteSound = function () {
        if (!this._soundMuted)
            return;
        this._soundMuted = false;
        //本地保存
        cc.sys.localStorage.setItem("__l__soundsManager_soundMuted", this._soundMuted);
    };
    //播放音效
    SoundsManager.prototype.playSound = function (sourceURL) {
        if (!sourceURL)
            return;
        if (this._soundMuted)
            return;
        cc.audioEngine.play(cc.url.raw(sourceURL), false, 1);
    };
    //播放音效
    SoundsManager.prototype.playSoundClip = function (clip) {
        //TODO:DEBUG
        return;
        if (!clip)
            return;
        if (this._soundMuted)
            return;
        if (!this._audioSource) {
            this._audioSource = cc.director.getScene().addComponent(cc.AudioSource);
        }
        this._audioSource.clip = clip;
        this._audioSource.play();
    };
    /**
     * 播放点击音效。前提是已经设置了 SoundsManager.tapSoundSource;
     */
    SoundsManager.prototype.playTapSound = function () {
        if (this.tapSoundSource) {
            this.playSound(this.tapSoundSource);
        }
    };
    //背景音乐
    SoundsManager.bgSoundID = NaN;
    SoundsManager = __decorate([
        ccclass
    ], SoundsManager);
    return SoundsManager;
}(cc.EventTarget));
exports.default = SoundsManager;

cc._RF.pop();