"use strict";
cc._RF.push(module, 'f3b9dUxSwhK7Ly101SQm345', 'Goods');
// Script/shopping/Goods.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var WXCore_1 = require("../gamecore/wechat/WXCore");
var GameManager_1 = require("../gamecore/managers/GameManager");
var GameEventNames_1 = require("../GameEventNames");
var ShopMod_1 = require("./ShopMod");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Goods = /** @class */ (function (_super) {
    __extends(Goods, _super);
    function Goods() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // 配置
        // public deploy:object = null;
        _this.sumShop = null;
        _this.shopPrice = null;
        _this.price = null;
        return _this;
        // update (dt) {}
    }
    Object.defineProperty(Goods.prototype, "deploy", {
        get: function () {
            return this._itemData;
        },
        set: function (v) {
            if (this._itemData != v) {
                this._itemData = v;
                this.initialize();
            }
        },
        enumerable: true,
        configurable: true
    });
    // 渲染 UI
    Goods.prototype.initialize = function () {
        var data = this.deploy;
        for (var key in data) {
            cc.log(this, "`````````````````````");
            if (key == "price") {
                this.price.getComponent(cc.Label).string = data[key];
            }
            // 买了 或者 使用了
            if (data["isBuy"]) {
                this.shopPic.active = true;
                this.newPro.active = false;
                this.lock.active = false;
                this.priceNode.active = false;
                if (data["isUse"]) {
                    this.useIn.active = true;
                    this.use.active = false;
                }
                else {
                    this.useIn.active = false;
                    this.use.active = true;
                }
            }
            else if (data["waitBuy"]) {
                this.shopPic.active = true;
                this.newPro.active = true;
                this.lock.active = false;
                this.priceNode.active = true;
                this.useIn.active = false;
                this.use.active = false;
            }
            else {
                this.shopPic.active = false;
                this.newPro.active = false;
                this.lock.active = true;
                this.priceNode.active = false;
                this.useIn.active = false;
                this.use.active = false;
            }
        }
    };
    // 取消购买
    Goods.prototype.cancelBuy = function (event, customEventData) {
        cc.log("取消购买");
    };
    // 确认购买
    Goods.prototype.affirmBuy = function (trade) {
        var myGem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
        var shopPrice = Number(trade["price"]);
        var showInfo = '';
        if (myGem >= shopPrice) {
            cc.log("购买成功", shopPrice, ShopMod_1.default.instance.isTab);
            var surplus = myGem - shopPrice;
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, surplus);
            showInfo = "购买成功，同时解锁了新购买项！";
            var isTab = ShopMod_1.default.instance.isTab;
            if (isTab) {
                ShopMod_1.default.instance.buyShopPot();
            }
            else {
                ShopMod_1.default.instance.buyShopCake();
            }
        }
        else {
            showInfo = "宝石不足";
            cc.log("购买失败", shopPrice);
        }
        WXCore_1.default.showToast(showInfo);
    };
    // onLoad () {
    // }
    Goods.prototype.start = function () {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTap, this.node);
    };
    Goods.prototype.onTap = function (ev) {
        cc.log(ev);
        var targetNode = ev.target.getComponent("Goods");
        targetNode.tapItem(targetNode.deploy);
    };
    // item 按钮
    Goods.prototype.tapItem = function (targetNode) {
        // 是否是已购买的    是否是使用中的
        if (targetNode["isBuy"]) {
            if (targetNode["isUse"]) {
                WXCore_1.default.showToast("皮肤已在使用中");
            }
            else {
                targetNode["isUse"] = true;
                WXCore_1.default.showToast("使用成功!");
                // StateManage.instance.setData(StateManage.KEY_SKIN,this.deploy.skinsRes);
            }
            // 是否是解锁的
        }
        else {
            if (targetNode["waitBuy"]) {
                var title = "确认购买?";
                var script_1 = this;
                var callback = function (label) {
                    cc.info(label);
                    if (label == "ok") {
                        script_1.affirmBuy(targetNode);
                    }
                    if (label == "off") { }
                };
                GameManager_1.default.eventManager.dispatchEventWith(GameEventNames_1.default.SHOW_ALERT, [title, callback]);
                // StateManage.instance.setData(StateManage.KEY_TRADE,this.deploy);
            }
            else {
                WXCore_1.default.showToast("购买上一个皮肤后解锁");
            }
        }
        // this.initialize();
    };
    __decorate([
        property(cc.Label)
    ], Goods.prototype, "price", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "use", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "useIn", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "priceNode", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "lock", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "shopPic", void 0);
    __decorate([
        property(cc.Node)
    ], Goods.prototype, "newPro", void 0);
    Goods = __decorate([
        ccclass
    ], Goods);
    return Goods;
}(cc.Component));
exports.default = Goods;

cc._RF.pop();