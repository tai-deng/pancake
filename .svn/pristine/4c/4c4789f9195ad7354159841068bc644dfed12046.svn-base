"use strict";
cc._RF.push(module, '45538n7JE1EJqcBQxxgUtw1', 'GameManager');
// Script/gamecore/managers/GameManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var SoundsManager_1 = require("./SoundsManager");
var PopUpManager_1 = require("./PopUpManager");
var EventManager_1 = require("./EventManager");
var Context_1 = require("../legs/Context");
var DataManager_1 = require("./DataManager");
var ItemManager_1 = require("./item/ItemManager");
var Utils_1 = require("./Utils");
var SceneManager_1 = require("../scene/SceneManager");
var GameManager = /** @class */ (function () {
    function GameManager() {
    }
    GameManager_1 = GameManager;
    Object.defineProperty(GameManager, "eventManager", {
        get: function () { return GameManager_1._eventManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "sceneManager", {
        get: function () { return GameManager_1._sceneManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "dataManager", {
        get: function () { return GameManager_1._dataManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "soundsManager", {
        get: function () { return GameManager_1._soundsManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "popUpManager", {
        get: function () { return GameManager_1._popUpManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "itemManager", {
        get: function () { return GameManager_1._itemManager; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(GameManager, "context", {
        get: function () { return GameManager_1._context; },
        enumerable: true,
        configurable: true
    });
    ;
    GameManager.init = function () {
        if (GameManager_1._initialized)
            return;
        GameManager_1._initialized = true;
        GameManager_1._canVibrate = true;
        //读取本地数据
        var v = cc.sys.localStorage.getItem("__l__gameManager_vibrateoff");
        if (v == "true") {
            GameManager_1.vibrateOff();
        }
    };
    Object.defineProperty(GameManager, "canVibrate", {
        /**
         * 获取是否可震动
         */
        get: function () {
            return GameManager_1._canVibrate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 关闭震动
     */
    GameManager.vibrateOff = function () {
        if (!GameManager_1._canVibrate)
            return;
        GameManager_1._canVibrate = false;
        cc.sys.localStorage.setItem("__l__gameManager_vibrateoff", true);
    };
    /**
     * 开启震动
     */
    GameManager.vibrateOn = function () {
        if (GameManager_1._canVibrate)
            return;
        GameManager_1._canVibrate = true;
        cc.sys.localStorage.removeItem("__l__gameManager_vibrateoff");
    };
    /**
     * 锁定场景不接受任何输入
     */
    GameManager.lockSence = function () {
    };
    /**
     * 是否解除所有锁定
     *
     * @param unlockAll
     */
    GameManager.unlockSence = function (unlockAll) {
    };
    Object.defineProperty(GameManager, "todayValue", {
        /**
         * 获取今日日期值。比如2018-07-07
         */
        get: function () {
            if (!GameManager_1._todayValue) {
                var date = new Date();
                GameManager_1._todayValue = "" + date.getFullYear();
                GameManager_1._todayValue += "-";
                var v = date.getMonth() + 1;
                GameManager_1._todayValue += (v < 10) ? ("0" + v) : v;
                GameManager_1._todayValue += "-";
                v = date.getDate();
                GameManager_1._todayValue += (v < 10) ? ("0" + v) : v;
            }
            return GameManager_1._todayValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 添加版本信息
     *
     */
    GameManager.addVersionInfo = function () {
        cc.info("----  gamecore ----");
        cc.info("-  addVersionInfo   -");
        // if (this._versionInfo) return;
        var n = new cc.Node();
        var label = n.addComponent(cc.Label);
        label.fontSize = 20;
        label.lineHeight = 24;
        var vStr = GameManager_1.gameVersion;
        if (GameManager_1.gameInternalVersionCode) {
            vStr += "." + GameManager_1.gameInternalVersionCode;
        }
        if (GameManager_1.isDebug)
            vStr += "【测试】";
        label.string = vStr;
        var winSize = cc.director.getWinSize();
        n.anchorX = 0;
        if (Utils_1.default.isIphoneX) {
            n.x = 20;
            n.y = winSize.height - 10;
        }
        else {
            n.x = 0;
            n.y = winSize.height - 10;
        }
        cc.director.getScene().addChild(n);
    };
    var GameManager_1;
    //版本号
    GameManager.gameVersion = "1.0";
    //是否是测试
    GameManager.isDebug = false;
    //总事件控制器
    GameManager._eventManager = new EventManager_1.default();
    //场景管理器
    GameManager._sceneManager = new SceneManager_1.default();
    //全局数据管理器
    GameManager._dataManager = new DataManager_1.default();
    //声音管理器
    GameManager._soundsManager = new SoundsManager_1.default();
    //popup管理器
    GameManager._popUpManager = new PopUpManager_1.default();
    //道具管理器
    GameManager._itemManager = new ItemManager_1.default();
    //legs框架上下文
    GameManager._context = new Context_1.default();
    GameManager._temp = GameManager_1.init();
    GameManager = GameManager_1 = __decorate([
        ccclass
    ], GameManager);
    return GameManager;
}());
exports.default = GameManager;

cc._RF.pop();