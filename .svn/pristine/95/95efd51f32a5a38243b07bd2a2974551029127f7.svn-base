"use strict";
cc._RF.push(module, '0ba25Y3bMRJpbOK+EJPWzHx', 'index');
// Script/index/index.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../gamecore/managers/GameManager");
var GameEventNames_1 = require("../GameEventNames");
var AlertCommand_1 = require("../commands/AlertCommand");
var StateManage_1 = require("../StateManage/StateManage");
var TaskMode_1 = require("../Task/TaskMode");
var ResurgenceCtrl_1 = require("../resurgence/ResurgenceCtrl");
var GameSystem_1 = require("../GameSystem");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var index = /** @class */ (function (_super) {
    __extends(index, _super);
    function index() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.starBar = null;
        _this.luckyMoneyBar = null;
        _this.rankingBar = null;
        _this.resurgenceBar = null;
        _this.shoppingBar = null;
        _this.soundBar = null;
        _this.taskBar = null;
        _this.voiceON = null;
        _this.voiceOFF = null;
        _this.spine = null;
        // 任务气泡
        _this._flicker = TaskMode_1.default.instance.flicker;
        // 排行气泡动画,默认进入游戏就会闪,查看后停止
        _this._rankBubble = StateManage_1.default.instance.getData(StateManage_1.default.KEY_RANKBUBBLE);
        _this.interval = 5;
        return _this;
    }
    index_1 = index;
    // onLoad () {}
    // private _tasks:Array<object>=[];
    index.prototype.start = function () {
        GameSystem_1.default.init();
        // 任务进度监听
        TaskMode_1.default.instance.on("bubbleChanged", this.bubbleChanged, this);
        this.starBar.on(cc.Node.EventType.TOUCH_END, this.onStartGame, this);
        this.luckyMoneyBar.on(cc.Node.EventType.TOUCH_END, this.onLuckyMoney, this);
        this.rankingBar.on(cc.Node.EventType.TOUCH_END, this.onRanking, this);
        this.resurgenceBar.on(cc.Node.EventType.TOUCH_END, this.onResurgence, this);
        this.shoppingBar.on(cc.Node.EventType.TOUCH_END, this.onShopping, this);
        this.soundBar.on(cc.Node.EventType.TOUCH_END, this.onSound, this);
        this.taskBar.on(cc.Node.EventType.TOUCH_END, this.onTask, this);
        this.initSystem();
        this.refreshUI();
        this.schedule(function () {
            this.spineAnimation();
        }, this.interval);
    };
    // spine ainimation
    index.prototype.spineAnimation = function () {
        var arr = ["interlude", "toppot"];
        var index = Math.floor(Math.random() * 2);
        if (index == 2)
            index = 1;
        this.spine.animation = "toppot";
        this.interval = Math.floor(Math.random() * 20) + 5;
    };
    // 系统初始化
    index.prototype.initSystem = function () {
        if (index_1._systemInitialized)
            return;
        index_1._systemInitialized = true;
        // 綁定弹窗事件到命令
        GameManager_1.default.context.mapEvent(GameEventNames_1.default.SHOW_ALERT, AlertCommand_1.default);
    };
    // 任务数据监听
    index.prototype.bubbleChanged = function (ev) {
        this._flicker = TaskMode_1.default.instance.flicker;
        this.refreshTaskState();
    };
    // 刷新 UI
    index.prototype.refreshUI = function () {
        if (!this._isOnLoadCalled)
            return;
        var rankBubbleNode = cc.find("Canvas/controlLeft/ranking/marvel");
        console.log("_rankBubble", this._rankBubble);
        if (this._rankBubble) {
            this.buMotion(rankBubbleNode, 3);
        }
        else {
            this.buMotion(rankBubbleNode, 1);
        }
        this.refreshTaskState();
        if (typeof wx == "undefined")
            return;
        wx.getUserInfo({
            success: function (res) {
                var openData = wx.getOpenDataContext();
                openData.postMessage({
                    "userInfo": res.userInfo,
                });
                console.log("传用户信息", res);
            }
        });
    };
    // 获取任务状态改变气泡
    index.prototype.refreshTaskState = function () {
        var litterNode = cc.find("Canvas/controlRight/task/marvel");
        var motion = this._flicker ? 3 : 2;
        this.buMotion(litterNode, motion);
    };
    // 气泡动作
    index.prototype.buMotion = function (node, num) {
        if (num == 3) {
            var seq = cc.repeatForever(cc.sequence(cc.scaleTo(0.8, 1.1, 1.1), cc.scaleTo(0.4, 0.9, 0.9)));
            node.runAction(seq);
            node.active = true;
        }
        else if (num == 2) {
            node.active = true;
        }
        else if (num == 1) {
            node.active = false;
        }
    };
    // 开始
    index.prototype.onStartGame = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        cc.director.loadScene("gameScene");
        if (typeof wx == "undefined")
            return;
        var openData = wx.getOpenDataContext();
        openData.postMessage({
            "integral": 60,
            "direction": 3,
            "posX": 100,
            "posY": 500,
        });
        console.log("主游戏子域");
    };
    // 红包
    index.prototype.onLuckyMoney = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        console.log("---红包---");
        cc.director.loadScene("luckyMoney");
    };
    // 排行
    index.prototype.onRanking = function (e) {
        cc.director.loadScene("ranking");
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_RANKBUBBLE, false);
        GameManager_1.default.soundsManager.playTapSound();
        if (typeof wx == "undefined")
            return;
        var openData = wx.getOpenDataContext();
        openData.postMessage({
            "direction": 2,
        });
        console.log("排行榜子域");
    };
    // 复活
    index.prototype.onResurgence = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        cc.director.loadScene("resurgence");
    };
    // 商店
    index.prototype.onShopping = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        cc.director.loadScene("shopping");
    };
    // 音效
    index.prototype.onSound = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        var voiceSwitch = GameManager_1.default.soundsManager.musicMuted;
        if (voiceSwitch) {
            // 停止播放背景音乐
            this.soundBar.getComponent(cc.Sprite).spriteFrame = this.voiceOFF;
            GameManager_1.default.soundsManager.muteMusic();
        }
        else {
            // 播放背景音乐
            this.soundBar.getComponent(cc.Sprite).spriteFrame = this.voiceON;
            GameManager_1.default.soundsManager.unmuteMusic();
        }
        console.log("---背景音效---");
    };
    // 任务
    index.prototype.onTask = function (e) {
        GameManager_1.default.soundsManager.playTapSound();
        cc.director.loadScene("task");
    };
    // update (dt) {}
    // onDestroy() {}
    // 宝石 +10
    index.prototype.gem = function () {
        var gem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM) + 10;
        var tagem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM) + 10;
        cc.log(gem, "*************");
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, gem);
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TAGEM, tagem);
    };
    // 翻转次数 + 5
    index.prototype.overturn = function () {
        var overturn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_OVERTURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_OVERTURN, overturn);
    };
    // 一周转体次数 + 5
    index.prototype.turn = function () {
        var turn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TURN, turn);
    };
    // 十秒内翻转次数 + 5
    index.prototype.tmturn = function () {
        var tmturn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TMTURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TMTURN, tmturn);
    };
    // 等级 + 1
    index.prototype.grade = function () {
        var grade = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TAGRADE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_GRADE, grade);
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TAGRADE, grade);
    };
    // 累计使用复活卡次数 + 1
    index.prototype.resurgenceCar = function () {
        var resurgenceCar = StateManage_1.default.instance.getData(StateManage_1.default.KEY_RESURGENCECAR) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_RESURGENCECAR, resurgenceCar);
    };
    // 好友接力次数 + 1
    index.prototype.fdrelay = function () {
        var fdrelay = StateManage_1.default.instance.getData(StateManage_1.default.KEY_FDRELAY) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_FDRELAY, fdrelay);
    };
    // 疯狂点击中点次数 + 10
    index.prototype.crazyTap = function () {
        var crazyTap = StateManage_1.default.instance.getData(StateManage_1.default.KEY_CRAZYTAP) + 10;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_CRAZYTAP, crazyTap);
    };
    // 累计任意分享 + 1
    index.prototype.anyShare = function () {
        var anyShare = StateManage_1.default.instance.getData(StateManage_1.default.KEY_ANYSHARE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_ANYSHARE, anyShare);
    };
    // 煎烤好友并分享 + 1
    index.prototype.ripeShare = function () {
        var ripeShare = StateManage_1.default.instance.getData(StateManage_1.default.KEY_RIPESHARE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_RIPESHARE, ripeShare);
    };
    // 复活卡数量 + 1
    index.prototype.tasknuma = function () {
        ResurgenceCtrl_1.default.instance.addResurgenceCard();
    };
    // 复活卡数量 - 1
    index.prototype.tasknumb = function () {
        ResurgenceCtrl_1.default.instance.minusResurgenceCard();
    };
    // 增加70分
    index.prototype.tasknumc = function () {
        cc.director.loadScene("rankSmall");
        console.log("功能移除了");
    };
    // 第二天 + 1
    index.prototype.nextDay = function () {
        // let nextDay = StateManage.instance.getData(StateManage.KEY_NEXTDAY) + 86400000;
        // StateManage.instance.setData(StateManage.KEY_NEXTDAY,nextDay)
        var toDay = new Date().getTime() + 86400000;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TODAY, toDay);
        cc.log(StateManage_1.default.instance.getData(StateManage_1.default.KEY_TODAY));
    };
    // 关闭首页子域
    index.prototype.offDeed = function () {
        console.log("功能移除了");
    };
    var index_1;
    __decorate([
        property(cc.Node)
    ], index.prototype, "starBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "luckyMoneyBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "rankingBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "resurgenceBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "shoppingBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "soundBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "taskBar", void 0);
    __decorate([
        property(cc.SpriteFrame)
    ], index.prototype, "voiceON", void 0);
    __decorate([
        property(cc.SpriteFrame)
    ], index.prototype, "voiceOFF", void 0);
    __decorate([
        property(sp.Skeleton)
    ], index.prototype, "spine", void 0);
    index = index_1 = __decorate([
        ccclass
    ], index);
    return index;
}(cc.Component));
exports.default = index;

cc._RF.pop();