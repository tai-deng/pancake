import WXCore from "../gamecore/wechat/WXCore";


const {ccclass, property} = cc._decorator;

@ccclass
export default class StateManage extends cc.Node {
    private static _instance:StateManage = null;

    static KEY_SHOPDATA:string = "shopdata"             // 商品数据
    static KEY_TASKDATA:string = "taskdata"             // 任务数据

    static KEY_SKIN:string = "skin";                    // 皮肤
    static KEY_SCORE:string = "score";                  // 得分
    static KEY_JEWEL_STATE:string = "jewel";            // 新钻石
    static KEY_ISOVER:string = 'isOver';                // 是否结束
    static KEY_CAKEPOS:string = "cakePos";              // 初始化饼的位置
    static KEY_GEM:string = "gem"                       // 宝石数量
    static KEY_RESURGENCECARDNUM:string= "resurgenceCardNum"    // 复活卡数量
    // 商店
    static KEY_SHOPING_TAB:string = "shoppingTab";      // 商店 TAB 
    static KEY_TRADE:string = "trade"                   // 商品价格 
    // 任务
    static KEY_TAGEM:string = "tagem"                   // 钻石任务
    static KEY_TAGRADE:string = "tagrade"               // 等级任务
    static KEY_OVERTURN:string = "overturn"             // 翻转次数
    static KEY_TURN:string = "turn"                     // 一周转体次数
    static KEY_TMTURN:string = "tmturn"                 // 十秒内翻转次数
    static KEY_GRADE:string = "grade"                   // 等级
    static KEY_RESURGENCECAR:string = "resurgenceCar"   // 累计使用复活卡次数
    static KEY_FDRELAY:string = "fdrelay"               // 好友接力数量
    static KEY_CRAZYTAP:string = "crazyTap"             // 疯狂点击中点次数
    static KEY_ANYSHARE:string = "anyShare"             // 累计任意分享
    static KEY_RIPESHARE:string = "ripeShare"           // 煎烤好友并分享
    static KEY_TASKNUM0:string = "tasknum0"             // A栏剩余任务次数
    static KEY_TASKNUM1:string = "tasknum1"             // B栏剩余任务次数
    static KEY_TASKNUM2:string = "tasknum2"             // C栏剩余任务次数
    static KEY_NEXTDAY:string = "nextDay"               // 第二天 0 点
    static KEY_TASK0:string = "task0"                   // A栏任务内容
    static KEY_TASK1:string = "task1"                   // B栏任务内容
    static KEY_TASK2:string = "task2"                   // C栏任务内容
    static KEY_ISGAIN0:string = "isgaina0"              // A栏是否领取
    static KEY_ISGAIN1:string = "isgaina1"              // B栏是否领取
    static KEY_ISGAIN2:string = "isgaina2"              // C栏是否领取
    static KEY_MIDNIGHT:string = "isMidnight"           // 是否午夜更新 
    static KEY_TODAY:string = "today"                   // 现在的时间


    public shopdata:object={};
    public taskdata:object={};
    public resurgenceCardNum:number=0;
    
    public skin:object={};
    public score:string = "0";
    public jewel:Number = 0;
    public shoppingTab:number = 0;
    public isOver:number = 2;
    public cakePos:any = null;
    public gem:number = 0;
    public trade:object = {};

    public overturn:number = 0;
    public turn:number = 0;
    public tmturn:number = 0;
    public grade:number = 0;
    public resurgenceCar:number = 0;
    public fdrelay:number = 0;
    public crazyTap:number = 0;
    public anyShare:number = 0;
    public ripeShare:number = 0;
    public tasknum0:number = 0;
    public tasknum1:number = 0;
    public tasknum2:number = 0;
    public nextDay:number = 0;
    public currentTask:Array<object> = [];
    public task0:object = {};
    public task1:object = {};
    public task2:object = {};
    public isgaina0:number = 0;
    public isgaina1:number = 0;
    public isgaina2:number = 0;
    public tagrade:number = 0;
    public tagem:number = 0;
    public isMidnight:number = 0;
    public today:number = 0;

    public static get instance():StateManage {
        if (!StateManage._instance) StateManage._instance = new StateManage();
        
        return StateManage._instance;
    }

    private _lastChangedKey:string;

    /**
     *  被修改的 KEY
     */
    public get lastChangedKey():string {
        return this._lastChangedKey;
    }

    
    // KEY 抛出改变事件
    public setData(key:string, value:any){

        if (this[key] !== value && this[key] != void 0) {
            this[key] = value;

            this._lastChangedKey = key;
            this.dispatchEvent(new cc.Event("change", false));
        }
    }
    // 获取状态
    public getData(key:string){
        /* let value = WXCore.getStorage(key);
        if(this[key] && value){
            return value;
        } */

        if(this[key] != void 0){
            return this[key];
        }
    }
}
