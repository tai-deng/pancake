"use strict";
cc._RF.push(module, '9f7c0EPgJBJLb2asY1+y12v', 'Utils');
// Script/gamecore/managers/Utils.ts

// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 功能管理
 */
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils_1 = Utils;
    Object.defineProperty(Utils, "iphoneXTopBarHeight", {
        //============================================================================
        //iphone x 顶部条高度
        get: function () {
            return 44;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Utils, "isIphoneX", {
        /**
         * 检查是否是iphoneX
         *
         */
        get: function () {
            try {
                return /iphone/gi.test(navigator.userAgent) && (screen.height == 812 && screen.width == 375);
            }
            catch (error) {
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 将cocos中canvas的rect数据转换为屏幕中的rect数据
     *
     * @param rect
     */
    Utils.toScreenRect = function (rect) {
        // cc.info("!!!!!!!!!!!!!!!!!!!!!!");
        var winSize = cc.director.getWinSize();
        var newRect = rect.clone();
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height, newRect.xMin, newRect.yMax);
        //转换为左上角作为(0, 0)点的坐标
        newRect.x = rect.xMin;
        newRect.y = winSize.height - newRect.yMax;
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        //获取屏幕尺寸
        var screenSize = cc.view.getFrameSize();
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        // cc.info(screenSize.width, screenSize.height);
        //计算缩放比例
        //TODO:NEXT，需要检查canvas的适配策略
        var s = screenSize.height / winSize.height;
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", s);
        newRect.x *= s;
        newRect.y *= s;
        newRect.width *= s;
        newRect.height *= s;
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        return newRect;
    };
    /**
     * 将屏幕中的矩形区域，转换为cocos中canvas的矩形区域
     *
     * @param rect
     */
    Utils.fromScreenRect = function (rect) {
        // cc.info("!!!!!!!!!!!!!!!!!!!!!!");
        // cc.info("fromScreenRect");
        var winSize = cc.director.getWinSize();
        var newRect = rect.clone();
        // cc.info(newRect.x, newRect.y, newRect.width, newRect.height);
        //获取屏幕尺寸
        var screenSize = cc.view.getFrameSize();
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        // cc.info(screenSize.width, screenSize.height);
        newRect.y = screenSize.height - newRect.y - newRect.height;
        //计算缩放比例
        //TODO:NEXT，需要检查canvas的适配策略
        var s = screenSize.height / winSize.height;
        newRect.x /= s;
        newRect.y /= s;
        newRect.width /= s;
        newRect.height /= s;
        var canvasRect = new cc.Rect(newRect.x, newRect.y, newRect.width, newRect.height);
        // cc.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", s);
        // cc.info(canvasRect.x, canvasRect.y, canvasRect.width, canvasRect.height)
        return canvasRect;
    };
    /**
     * 将cocos的资源路径转换为微信小游戏的资源路径。
     *
     * @param resourcePath
     */
    Utils.toWechatMiniGameResourcePath = function (resourcePath) {
        if (resourcePath.charAt(0) == "/")
            resourcePath = resourcePath.substr(1);
        return "res/raw-assets/" + resourcePath;
    };
    /**
     * 将一个值转换为整型。如果失败，则返回0
     *
     * @param value
     */
    Utils.toInt = function (value) {
        var v = parseInt("" + value);
        if (isNaN(v))
            v = 0;
        return v;
    };
    /**
     * 将一个label的值增加到或减少到另外一个值。
     * 比如是整数。
     *
     * @param label
     * @param v
     * @param duration          动画时间
     */
    Utils.labelStringToValue = function (label, v, duration) {
        if (duration === void 0) { duration = 0.5; }
        if (isNaN(v))
            return;
        var currentV = parseInt(label.string);
        if (isNaN(currentV) || currentV < 0)
            currentV = 0;
        if (currentV == v)
            return;
        var uuid = label.uuid;
        clearInterval(this._labelToValueMap[uuid]);
        var stepV = (v - currentV) / 10;
        var step = 0;
        this._labelToValueMap[uuid] = setInterval(function () {
            step++;
            if (step == 10) {
                label.string = "" + v;
                // cc.info("label to value", v, label.string);
                clearInterval(Utils_1._labelToValueMap[uuid]);
            }
            else {
                label.string = "" + (currentV + Math.floor(stepV * step));
                // cc.info(v, label.string);
            }
        }, 50);
    };
    var Utils_1;
    //==============================================================
    Utils._labelToValueMap = {};
    Utils = Utils_1 = __decorate([
        ccclass
    ], Utils);
    return Utils;
}());
exports.default = Utils;

cc._RF.pop();