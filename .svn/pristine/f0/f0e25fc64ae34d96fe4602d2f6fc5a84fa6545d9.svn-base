"use strict";
cc._RF.push(module, '1efd3LL0ldFDLRax8Cep4WI', 'Context');
// Script/gamecore/legs/Context.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../managers/GameManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * legs框架上下文
 *
 */
var Context = /** @class */ (function () {
    function Context() {
        //事件管理器
        this._eventMap = {};
    }
    /**
     * 绑定事件至命令。收到该事件时，会新建一个命令并执行。
     *
     * @param eventName                 事件名
     * @param commandClass              命令类
     */
    Context.prototype.mapEvent = function (eventName, commandClass) {
        if (this._eventMap[eventName] == undefined) {
            this._eventMap[eventName] = [];
            GameManager_1.default.eventManager.on(eventName, this.eventsHandler, this);
        }
        var commandClasses = this._eventMap[eventName];
        if (commandClasses.indexOf(commandClass) == -1) {
            commandClasses.push(commandClass);
        }
    };
    /**
     * 取消绑定事件
     *
     * @param eventName                     事件名
     * @param commandClass                  命令类。如果传递null，则取消绑定所有命令
     */
    Context.prototype.unmapEvent = function (eventName, commandClass) {
        if (commandClass === void 0) { commandClass = null; }
        var commandClasses = this._eventMap[eventName];
        if (commandClasses != undefined) {
            if (commandClass) {
                //取消绑定该事件的指定命令
                var index = commandClasses.indexOf(commandClass);
                if (index >= 0) {
                    commandClasses.splice(index, 1);
                    if (commandClasses.length == 0) {
                        delete this._eventMap[eventName];
                        GameManager_1.default.eventManager.off(eventName, this.eventsHandler);
                    }
                }
            }
            else {
                //取消绑定所有该事件的命令
                delete this._eventMap[eventName];
                GameManager_1.default.eventManager.off(eventName, this.eventsHandler);
            }
        }
    };
    /**
     * 解绑所有事件
     */
    Context.prototype.unmapAllEvent = function () {
        for (var key in this._eventMap) {
            this.unmapEvent(key);
        }
    };
    /**
     * 事件管理器
     */
    Context.prototype.eventsHandler = function (evt) {
        var eventName = evt.type;
        var eventData = evt["data"];
        var commandClasses = this._eventMap[eventName];
        if (commandClasses != undefined) {
            var len = commandClasses.length;
            for (var i = 0; i < len; i++) {
                var command = new commandClasses[i]();
                command.event = evt;
                command.data = eventData;
                command.execute();
            }
        }
    };
    Context = __decorate([
        ccclass
    ], Context);
    return Context;
}());
exports.default = Context;

cc._RF.pop();