"use strict";
cc._RF.push(module, '22c92KIEiBHU6Cv3Ql2PX4Q', 'GameSceneMain');
// Script/gameScene/GameSceneMain.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../gamecore/managers/GameManager");
var StateManage_1 = require("../StateManage/StateManage");
var GameSystem_1 = require("../GameSystem");
var GameSceneEvents_1 = require("./GameSceneEvents");
var ActionMain_1 = require("./ActionMain");
var GameConfig_1 = require("../GameConfig");
var LevelInfoMain_1 = require("./LevelInfoMain");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 游戏场景脚本
 *
 */
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionPrefab = null;
        //用户等级显示
        _this.levelInfo = null;
        //分数显示
        _this.scoreLabel = null;
        //分数显示
        _this.tapTipNode = null;
        //记录上一次宝石的数量
        _this._lastDiamondCount = 0;
        //当前等级信息
        _this._currentLevelData = null;
        return _this;
    }
    Game.prototype.onLoad = function () {
        cc.info("【GameSceneMain init】");
        //初始化系统
        GameSystem_1.default.init();
        //初始化物理系统
        cc.director.getPhysicsManager().enabled = true;
        cc.director.getPhysicsManager().debugDrawFlags = 1;
    };
    Game.prototype.start = function () {
        cc.info(this.node.name);
        cc.info("【GameSceneMain start】");
        //监听事件
        this.node.on(GameSceneEvents_1.default.LEVEL_CHANGED, this.levelChangedHandler, this);
        //点击等级信息，显示等级详细信息
        this.levelInfo.node.on(cc.Node.EventType.TOUCH_END, this.levelInfoTapHandler, this);
        this.initAction();
        this.refreshLevel();
        //TODO:DEBUG 显示版本信息
        GameManager_1.default.addVersionInfo();
    };
    /**
     * 初始化手臂结构
     */
    Game.prototype.initAction = function () {
        cc.info("【GameSceneMain initAction】");
        this._actionNode = cc.instantiate(this.actionPrefab);
        this._action = this._actionNode.getComponent(ActionMain_1.default);
        this._actionNode.on(GameSceneEvents_1.default.GAME_START, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents_1.default.SCORE_CHANGED, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents_1.default.DIAMONDS_CHANGED, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents_1.default.GAME_OVER, this.actionEventsHandler, this);
        this.node.addChild(this._actionNode);
    };
    /**
     *
     * @param e
     */
    Game.prototype.actionEventsHandler = function (e) {
        var eType = e.type;
        switch (eType) {
            case GameSceneEvents_1.default.GAME_START:
                //提示不可见
                this.tapTipNode.active = false;
                break;
            case GameSceneEvents_1.default.SCORE_CHANGED:
                var score = this._action.score;
                //分数改变
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_SCORE, score);
                //显示分数
                this.scoreLabel.string = "" + score;
                //改变位置
                this.levelInfo.node.x = this.scoreLabel.node.x + this.scoreLabel.node.width / 2 + this.levelInfo.node.width / 2 + 5;
                //刷新数据
                this.levelInfo.score = score;
                //刷新等级
                this.refreshLevel();
                break;
            case GameSceneEvents_1.default.SCORE_CHANGED:
                //宝石数量改变
                var v = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
                v = v + this._action.diamondCount - this._lastDiamondCount;
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, v);
                break;
            case GameSceneEvents_1.default.GAME_OVER:
                //游戏结束
                break;
        }
    };
    Object.defineProperty(Game.prototype, "currentLevelData", {
        /**
         * 获取当前等级信息
         */
        get: function () {
            return this._currentLevelData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 刷新等级
     */
    Game.prototype.refreshLevel = function () {
        var data;
        var score = this._action.score;
        for (var i = 0; i < GameConfig_1.default.LEVELS.length; i++) {
            var obj = GameConfig_1.default.LEVELS[i];
            var scoreValues = obj["score"];
            if (score >= scoreValues[0] && score <= scoreValues[1]) {
                data = obj;
                break;
            }
        }
        if (data && data != this._currentLevelData) {
            this._currentLevelData = data;
            //抛出事件
            this.node.dispatchEvent(new cc.Event(GameSceneEvents_1.default.LEVEL_CHANGED, false));
        }
    };
    /**
     * 等级变化回调
     *
     * @param e
     */
    Game.prototype.levelChangedHandler = function (e) {
        //设置数据
        this.levelInfo.levelData = this._currentLevelData;
    };
    /**
     * 点击等级信息
     *
     * @param e
     */
    Game.prototype.levelInfoTapHandler = function (e) {
        //播放音效
        GameManager_1.default.soundsManager.playTapSound();
    };
    // update (dt) {
    // }
    Game.prototype.onDestroy = function () {
    };
    __decorate([
        property(cc.Prefab)
    ], Game.prototype, "actionPrefab", void 0);
    __decorate([
        property(LevelInfoMain_1.default)
    ], Game.prototype, "levelInfo", void 0);
    __decorate([
        property(cc.Label)
    ], Game.prototype, "scoreLabel", void 0);
    __decorate([
        property(cc.Node)
    ], Game.prototype, "tapTipNode", void 0);
    Game = __decorate([
        ccclass
    ], Game);
    return Game;
}(cc.Component));
exports.default = Game;

cc._RF.pop();