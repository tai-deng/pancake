"use strict";
cc._RF.push(module, 'e1f6867dmJPN5cv7QO6KTfm', 'DataManager');
// Script/gamecore/managers/DataManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameCoreEvent_1 = require("../GameCoreEvent");
var GameManager_1 = require("./GameManager");
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 数据管理器。可以通过该管理器管理全局数据。
 */
var DataManager = /** @class */ (function () {
    function DataManager() {
        /**
         * 数据
         */
        this._data = {};
        //保存到本地的数据
        this._localData = {};
        this.unserialize();
    }
    DataManager_1 = DataManager;
    Object.defineProperty(DataManager.prototype, "lastChangedKey", {
        /**
         * 获取上次变化值的key值
         */
        get: function () {
            return this._lastChangedKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置全局数据。
     *
     *
     *
     * @param key               字段名
     * @param value             字段值
     * @param saveToLocal       是否保存到本地。如果保存到本地，字段值类型必须是简单类型，比如number、boolean、array
     * @param justToday         日期变化后是否删除。该参数只有在saveToLocal参数为true的时候生效。
     *
     */
    DataManager.prototype.setData = function (key, value, saveToLocal, justToday) {
        if (saveToLocal === void 0) { saveToLocal = false; }
        if (justToday === void 0) { justToday = false; }
        if (this._data[key] !== value) {
            this._data[key] = value;
            //保存到本地
            if (saveToLocal) {
                var data = { "v": value };
                if (justToday)
                    data["today"] = GameManager_1.default.todayValue;
                this._localData[key] = data;
                this.serialize();
            }
            this._lastChangedKey = key;
            GameManager_1.default.eventManager.dispatchEventWith(GameCoreEvent_1.default.DATA_CHANGE, key);
        }
    };
    /**
     * 获取全局数据
     *
     * @param key
     */
    DataManager.prototype.getData = function (key) {
        return this._data[key];
    };
    /**
     * 序列化数据
     */
    DataManager.prototype.serialize = function () {
        var v = JSON.stringify(this._localData);
        cc.sys.localStorage.setItem(DataManager_1.L_KEY, v);
    };
    /**
     * 反序列化
     */
    DataManager.prototype.unserialize = function () {
        try {
            var v = cc.sys.localStorage.getItem(DataManager_1.L_KEY);
            this._localData = JSON.parse(v);
            if (!this._localData)
                this._localData = {};
            //复制数据
            for (var key in this._localData) {
                //{"v":数据值, "today":日期值}
                var data = this._localData[key];
                var v_1 = data["v"];
                var today = data["today"];
                //如果有设置隔日删除，则需要检查日期值
                if (today && GameManager_1.default.todayValue == today) {
                    this._data[key] = v_1;
                }
            }
        }
        catch (err) {
            this._localData = {};
        }
    };
    //字段名
    DataManager.L_KEY = "__data_manager_local_v";
    DataManager = DataManager_1 = __decorate([
        ccclass
    ], DataManager);
    return DataManager;
    var DataManager_1;
}());
exports.default = DataManager;

cc._RF.pop();