"use strict";
cc._RF.push(module, '735c4oiUOZHD41bVADC2XsY', 'Task');
// Script/Task/Task.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Json_1 = require("../Json/Json");
var TaskItem_1 = require("./TaskItem");
var TaskMode_1 = require("./TaskMode");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Task = /** @class */ (function (_super) {
    __extends(Task, _super);
    function Task() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sec = 0;
        // 任务节点
        _this.items = [];
        // 所有任务
        _this.tasks = [];
        // 当前任务
        _this.currentTask = [];
        _this.date = new Date();
        return _this;
    }
    Object.defineProperty(Task.prototype, "useData", {
        get: function () {
            return this._itemData;
        },
        set: function (v) {
            if (this._itemData != v) {
                this._itemData = v;
                this.initTask();
            }
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.onLoad = function () {
        this.tasks = new Json_1.default().tasks;
    };
    Task.prototype.start = function () {
        // this.init();
        this.useData = TaskMode_1.default.instance.handOut();
        TaskMode_1.default.instance.on("useDataChanged", this.dataChanged, this);
    };
    Task.prototype.dataChanged = function (ev) {
        this.useData = TaskMode_1.default.instance.handOut();
    };
    Task.prototype.initTask = function () {
        if (!this._isOnLoadCalled)
            return;
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            item.getComponent(TaskItem_1.default)["data"] = this.useData[i];
        }
    };
    /**
     * 定时更新任务
     * 1.获取当前的日期 年月日
     * 2.获取下一天0点的时间戳
     * 3.当前的时间大于这个时间就给一个刷新机会
     * 4.给过机会之后重新获取当前的日期 年月日
     */
    Task.prototype.update = function (dt) {
        this.sec += dt;
        if (Math.floor(this.sec) == 1) {
            TaskMode_1.default.instance.setTimeDay();
            this.sec = 0;
        }
    };
    __decorate([
        property([cc.Node])
    ], Task.prototype, "items", void 0);
    Task = __decorate([
        ccclass
    ], Task);
    return Task;
}(cc.Component));
exports.default = Task;

cc._RF.pop();