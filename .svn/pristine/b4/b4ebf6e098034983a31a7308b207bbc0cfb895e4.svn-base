"use strict";
cc._RF.push(module, 'aadfeh8BHxEr4hc8eyUCto7', 'gameScene');
// Script/TopNavigationBar/gameScene.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var GameManager_1 = require("../gamecore/managers/GameManager");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TopNavigationBar = /** @class */ (function (_super) {
    __extends(TopNavigationBar, _super);
    function TopNavigationBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * 顶部导航三个元素
         */
        _this.back = null;
        _this.grade = null;
        _this.score = null;
        _this.animation = null;
        return _this;
    }
    TopNavigationBar.prototype.backHome = function () {
        cc.director.loadScene("indexSence");
        GameManager_1.default.soundsManager.playTapSound();
        console.log("返回!!!!!!");
    };
    TopNavigationBar.prototype.onLoad = function () {
        StateManage_1.default.instance.on("change", this.stateChangeHandler, this);
    };
    TopNavigationBar.prototype.start = function () {
        this.back.on(cc.Node.EventType.TOUCH_END, this.backHome, this);
        this.score.getChildByName("Label").getComponent(cc.Label).string = StateManage_1.default.instance.getData("gem");
        // cc.log(this.node.name)
    };
    // update (dt) {}
    TopNavigationBar.prototype.stateChangeHandler = function (e) {
        var key = StateManage_1.default.instance.lastChangedKey;
        // 监控钻石
        if (key == StateManage_1.default.KEY_GEM) {
            this.score.getChildByName("Label").getComponent(cc.Label).string = StateManage_1.default.instance.getData(key);
            if (cc.director.getScene().name == "indexSence") {
                this.animation.play();
            }
        }
    };
    __decorate([
        property(cc.Node)
    ], TopNavigationBar.prototype, "back", void 0);
    __decorate([
        property(cc.Node)
    ], TopNavigationBar.prototype, "grade", void 0);
    __decorate([
        property(cc.Node)
    ], TopNavigationBar.prototype, "score", void 0);
    __decorate([
        property(cc.Animation)
    ], TopNavigationBar.prototype, "animation", void 0);
    TopNavigationBar = __decorate([
        ccclass
    ], TopNavigationBar);
    return TopNavigationBar;
}(cc.Component));
exports.default = TopNavigationBar;

cc._RF.pop();