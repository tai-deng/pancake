{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\Jewels/assets\\Script\\Jewels\\Jewels.ts"],"names":[],"mappings":";;;;;AAEM,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAG1C;IAAmC,yBAAY;IAD/C;QAAA,qEAqDC;QAjDG,YAAM,GAAyB,EAAE,CAAC;QAElC,aAAO,GAAW,IAAI,CAAC;QAChB,cAAQ,GAAkB,IAAI,CAAC;QAC9B,gBAAU,GAAW,IAAI,CAAC;;QA8BlC,gDAAgD;QAChD,4DAA4D;QAC5D,mFAAmF;QACnF,4BAA4B;QAC5B,oCAAoC;QACpC,0EAA0E;QAC1E,QAAQ;QACR,IAAI;QAEJ,WAAW;QAEX,IAAI;QACJ,gBAAgB;QAEhB,IAAI;IACR,CAAC;IA3CU,sBAAM,GAAb;QACI,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAC;YACjB,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YAC7C,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YAChB,IAAI,KAAK,GAAG,GAAG,CAAC;YAChB,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAC,CAAC,GAAG,CAAC,KAAK,GAAC,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAG,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9D,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YAClE,IAAI,GAAG,GAAG,EAAE,CAAC,aAAa,CACtB,EAAE,CAAC,QAAQ,CACP,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EACnB,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAC3B,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SAC3B;IACL,CAAC;IAED,sBAAM,GAAN;IAEA,CAAC;IAhCD;QADC,QAAQ,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;yCACO;IAElC;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;0CACK;IALN,KAAK;QADzB,OAAO;OACa,KAAK,CAoDzB;IAAD,YAAC;CApDD,AAoDC,CApDkC,EAAE,CAAC,SAAS,GAoD9C;kBApDoB,KAAK","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Jewels","sourcesContent":["import StateManage from \"../StateManage/StateManage\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Jewel extends cc.Component {\r\n\r\n    @property([cc.SpriteFrame])\r\n    jewels:Array<cc.SpriteFrame> = [];\r\n    @property(cc.Node)\r\n    terrace:cc.Node = null;\r\n    public newJewel:cc.SpriteFrame = null;\r\n    private terracePos:cc.Vec2 = null;\r\n\r\n    public create():void{\r\n        if(!this.node.active){\r\n            let random = Math.floor(Math.random()*3);\r\n            random == 3? 0 : random;\r\n            this.newJewel = this.jewels[random];\r\n            this.terracePos = this.terrace.getPosition();\r\n            let x_Max = 60;\r\n            let x_Min = -60;\r\n            let y_Max = 200;\r\n            let y_Min = 50;\r\n            let x = Math.floor(Math.random()*x_Max*2 - (x_Max/2));\r\n            let y = Math.floor(Math.random()*y_Min + y_Max);\r\n            this.node.getComponent(cc.Sprite).spriteFrame = this.newJewel;\r\n            this.node.setPosition(this.terracePos.x + x,this.terracePos.y + y)\r\n            let seq = cc.repeatForever(\r\n                cc.sequence(\r\n                    cc.moveBy(1, 0, 15),\r\n                    cc.moveBy(1, 0, -15),\r\n            ));\r\n            this.node.runAction(seq);\r\n            this.node.active = true; \r\n        }\r\n    }\r\n\r\n    onLoad(){\r\n\r\n    }\r\n\r\n    // private stateChangeHandler(e:cc.Event):void {\r\n    //     let key:string = StateManage.instance.lastChangedKey;\r\n    //     if (key == StateManage.KEY_JEWEL_STATE && StateManage.instance.jewel == 1) {\r\n    //         // this.create();\r\n    //         this.node.active = false;\r\n    //         // StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,2);\r\n    //     }\r\n    // }\r\n\r\n    // start(){\r\n\r\n    // }\r\n    // update (dt) {\r\n\r\n    // }\r\n}\r\n"]}