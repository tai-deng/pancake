"use strict";
cc._RF.push(module, 'd09d8ifjKdGe7KDAxVOPfcv', 'TaskMode');
// Script/Task/TaskMode.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var TaskJson_1 = require("./TaskJson");
var TaskProto_1 = require("./TaskProto");
var WXCore_1 = require("../gamecore/wechat/WXCore");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var TaskMode = /** @class */ (function (_super) {
    __extends(TaskMode, _super);
    function TaskMode() {
        var _this = _super.call(this) || this;
        _this._storageTaskData = [];
        _this._taskDataJson = new TaskJson_1.default().task;
        _this._useData = [];
        _this.date = new Date();
        _this.flicker = false;
        _this.initTaskData();
        StateManage_1.default.instance.on("change", _this.stateChangeHandler, _this);
        return _this;
    }
    TaskMode_1 = TaskMode;
    Object.defineProperty(TaskMode, "instance", {
        get: function () {
            if (!TaskMode_1._instance)
                TaskMode_1._instance = new TaskMode_1();
            return TaskMode_1._instance;
        },
        enumerable: true,
        configurable: true
    });
    // 初始化渲染数据
    TaskMode.prototype.initTaskData = function () {
        var data = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TASKDATA);
        if (JSON.stringify(data) == "{}") {
            this.creation();
        }
        else {
            this._useData = data;
        }
    };
    // 创建任务实例
    TaskMode.prototype.create = function () {
        while (true) {
            var length = this._taskDataJson.length;
            var ind = Math.floor(Math.random() * length);
            ind = ind == length ? length - 1 : ind;
            var item = this._taskDataJson[ind];
            var hasSame = false;
            for (var i = 0; i < this._useData.length; ++i) {
                if (this._useData[i]["taskContent"]['id'] == item['id']) {
                    hasSame = true;
                    break;
                }
            }
            if (!hasSame) {
                var task = new TaskProto_1.default();
                task["taskContent"] = item;
                this.rezreo(item["value"]);
                this._useData.push(task);
                return task;
            }
        }
    };
    // 任务数据归零
    TaskMode.prototype.rezreo = function (el) {
        console.log("-------------归零----------", el);
        switch (el) {
            case "overturn":
                StateManage_1.default.instance.setData("overturn", 0);
                break;
            case "tagem":
                StateManage_1.default.instance.setData("tagem", 0);
                break;
            case "turn":
                StateManage_1.default.instance.setData("turn", 0);
                break;
            case "tmturn":
                StateManage_1.default.instance.setData("tmturn", 0);
                break;
            case "tagrade":
                StateManage_1.default.instance.setData("tagrade", 0);
                break;
            case "resurgenceCar":
                StateManage_1.default.instance.setData("resurgenceCar", 0);
                break;
            case "fdrelay":
                StateManage_1.default.instance.setData("fdrelay", 0);
                break;
            case "crazyTap":
                StateManage_1.default.instance.setData("crazyTap", 0);
                break;
            case "anyShare":
                StateManage_1.default.instance.setData("anyShare", 0);
                break;
            case "ripeShare":
                StateManage_1.default.instance.setData("ripeShare", 0);
                break;
        }
    };
    // 创建任务数量
    TaskMode.prototype.creation = function () {
        for (var i = 0; i < 3; i++) {
            this.create();
        }
    };
    TaskMode.prototype.handOut = function () {
        return this._useData.concat();
    };
    // 功能1 看视频 刷新任务
    TaskMode.prototype.refreshTask = function (task) {
        var data = this._useData;
        for (var i = 0; i < data.length; i++) {
            if (data[i]["taskContent"]["id"] == task["taskContent"]["id"]) {
                this._useData[i] = this.create();
                this._useData[i]["isgaina"] = false;
                this._useData[i]["isFinish"] = false;
                this._useData[i]["tasknum"] = 0;
            }
        }
        this.dispatchEvent(new cc.Event("useDataChanged", false));
    };
    // 功能2 开始游戏或分享
    TaskMode.prototype.watchVideo = function (task) {
        console.log("开始游戏或分享");
        this.dispatchEvent(new cc.Event("useDataChanged", false));
    };
    // 功能3 领取奖励
    TaskMode.prototype.receiveAward = function (task) {
        var data = this._useData;
        var awardName = task["taskContent"]["awardName"];
        var awardNum = task["taskContent"]["awardNum"];
        WXCore_1.default.showToast("\u83B7\u5F97 \u5B9D\u77F3 \u00D7" + awardNum);
        awardNum = awardNum + StateManage_1.default.instance.getData(awardName);
        StateManage_1.default.instance.setData(awardName, awardNum);
        for (var i = 0; i < data.length; i++) {
            if (data[i]["taskContent"]["id"] == task["taskContent"]["id"]) {
                this._useData[i]["isgaina"] = true;
                this._useData[i]["isFinish"] = true;
                this._useData[i]["tasknum"] = 0;
                this.rezreo(this._useData[i]["taskContent"]["value"]);
            }
        }
        this.dispatchEvent(new cc.Event("useDataChanged", false));
    };
    // 功能4 完成任务
    TaskMode.prototype.finishTask = function (task) {
        var data = this._useData;
        for (var i = 0; i < data.length; i++) {
            if (data[i]["taskContent"]["id"] == task["taskContent"]["id"]) {
                this._useData[i]["isgaina"] = false;
                this._useData[i]["isFinish"] = true;
                this._useData[i]["tasknum"] = 0;
                this._useData[i]["tasknum"] = this._useData[i]["tasknum"] - 1;
            }
        }
        cc.log(this._useData);
        this.dispatchEvent(new cc.Event("useDataChanged", false));
    };
    // 功能5 刷已经完成的任务
    TaskMode.prototype.refreshDoneTask = function () {
        var data = this._useData;
        for (var i = 0; i < data.length; i++) {
            if (data[i]["isgaina"] && data[i]["isFinish"]) {
                this._useData[i] = this.create();
                this._useData[i]["isgaina"] = false;
                this._useData[i]["isFinish"] = false;
            }
        }
        this.dispatchEvent(new cc.Event("useDataChanged", false));
    };
    // 功能6 定时更新任务
    TaskMode.prototype.setTimeDay = function () {
        var nextDay = StateManage_1.default.instance.getData(StateManage_1.default.KEY_NEXTDAY);
        var today = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TODAY);
        today = today ? today : this.date.getTime();
        // 没有目标时间的时候
        if (nextDay == 0) {
            this.renewal();
        }
        else if (today > nextDay) {
            this.newNextDay();
        }
    };
    // 创建目标时间
    TaskMode.prototype.renewal = function () {
        var time = this.date.getTime();
        var newDate = new Date(time + 86400000);
        newDate.setHours(0, 0, 0);
        var nextDay = newDate.getTime();
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_NEXTDAY, nextDay);
    };
    // 更新目标时间
    TaskMode.prototype.newNextDay = function () {
        var time = this.date.getTime();
        var newDate = new Date(time + 86400000);
        newDate.setHours(0, 0, 0);
        var nextDay = newDate.getTime();
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_NEXTDAY, nextDay);
        this.refreshDoneTask();
    };
    // 保存使用中的任务到 storage
    TaskMode.prototype.setStorageData = function () { };
    // 数据值监控
    TaskMode.prototype.stateChangeHandler = function (e) {
        var key = StateManage_1.default.instance.lastChangedKey;
        for (var i = 0; i < this._useData.length; i++) {
            if (key == this._useData[i]["taskContent"]["value"]) {
                var current = StateManage_1.default.instance.getData(StateManage_1.default.instance.lastChangedKey);
                var want = this._useData[i]["taskContent"]["goal"];
                if (current >= want) {
                    this._useData[i]["isFinish"] = true;
                    this._useData[i]["isgaina"] = false;
                    this.dispatchEvent(new cc.Event("useDataChanged", false));
                    this.flicker = true;
                }
                else {
                    this.flicker = false;
                }
                this.dispatchEvent(new cc.Event("bubbleChanged", false));
                console.log(this._useData, "this._flicker", this.flicker);
            }
        }
    };
    var TaskMode_1;
    TaskMode._instance = null;
    TaskMode = TaskMode_1 = __decorate([
        ccclass
    ], TaskMode);
    return TaskMode;
}(cc.Node));
exports.default = TaskMode;

cc._RF.pop();