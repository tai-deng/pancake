"use strict";
cc._RF.push(module, '9b2c0Yaa0ZJ+L5bFp2ENUo8', 'DailyTaskManager');
// Script/gamecore/dailytask/DailyTaskManager.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DailyTaskConfig_1 = require("./DailyTaskConfig");
var DailyTaskEventType_1 = require("./DailyTaskEventType");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 每日任务管理器
 */
var DailyTaskManager = /** @class */ (function (_super) {
    __extends(DailyTaskManager, _super);
    function DailyTaskManager() {
        var _this = _super.call(this) || this;
        /**
         * 今日任务
         */
        _this._todayTasks = [];
        if (DailyTaskManager_1._instance)
            throw new Error("Please use DailyTaskManager.instance");
        DailyTaskManager_1._instance = _this;
        _this.refreshTask();
        return _this;
    }
    DailyTaskManager_1 = DailyTaskManager;
    Object.defineProperty(DailyTaskManager, "instance", {
        /**
         * 获取每日任务管理器单例
         *
         */
        get: function () {
            if (!DailyTaskManager_1._instance) {
                new DailyTaskManager_1();
            }
            return DailyTaskManager_1._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DailyTaskManager.prototype, "todayTasks", {
        /**
         * 获取今日任务
         */
        get: function () {
            return this._todayTasks.concat();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 刷新任务
     */
    DailyTaskManager.prototype.refreshTask = function () {
        //获取上次刷新时间
        var now = new Date();
        var todayV = "" + now.getFullYear() + "-" + now.getMonth() + "-" + now.getDate();
        var refreshDate = cc.sys.localStorage.getItem(DailyTaskManager_1.KEY_NAME);
        if (refreshDate === todayV)
            return;
        var hasChange = false;
        while (this._todayTasks.length > DailyTaskConfig_1.default.MAX_COUNT) {
            this._todayTasks.pop();
            hasChange = true;
        }
        while (this._todayTasks.length < DailyTaskConfig_1.default.MAX_COUNT) {
            this._todayTasks.push(this.createNewTask());
            hasChange = true;
        }
        if (hasChange) {
            //记录任务刷新日期
            cc.sys.localStorage.setItem(DailyTaskManager_1.KEY_NAME, todayV);
            this.dispatchEvent(new cc.Event(DailyTaskEventType_1.default.TODAY_TASK_CHANGED, false));
        }
    };
    /**
     * 创建一个新的任务
     */
    DailyTaskManager.prototype.createNewTask = function () {
        return null;
    };
    /**
     * 重置
     *
     */
    DailyTaskManager.prototype.reset = function () {
        cc.sys.localStorage.removeItem(DailyTaskManager_1.KEY_NAME);
        this._todayTasks = [];
        this.refreshTask();
    };
    //本地保存的键名称
    DailyTaskManager.KEY_NAME = "__taskmanager_refresh_date";
    DailyTaskManager = DailyTaskManager_1 = __decorate([
        ccclass
    ], DailyTaskManager);
    return DailyTaskManager;
    var DailyTaskManager_1;
}(cc.Node));
exports.default = DailyTaskManager;

cc._RF.pop();