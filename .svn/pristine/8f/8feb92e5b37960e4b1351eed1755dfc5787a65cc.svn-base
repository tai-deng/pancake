"use strict";
cc._RF.push(module, '0ba25Y3bMRJpbOK+EJPWzHx', 'index');
// Script/index/index.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../gamecore/managers/GameManager");
var GameEventNames_1 = require("../GameEventNames");
var AlertCommand_1 = require("../commands/AlertCommand");
var StateManage_1 = require("../StateManage/StateManage");
var TaskMode_1 = require("../Task/TaskMode");
var ResurgenceCtrl_1 = require("../resurgence/ResurgenceCtrl");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var index = /** @class */ (function (_super) {
    __extends(index, _super);
    function index() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.starBar = null;
        _this.luckyMoneyBar = null;
        _this.rankingBar = null;
        _this.resurgenceBar = null;
        _this.shoppingBar = null;
        _this.soundBar = null;
        _this.taskBar = null;
        // onLoad () {}
        _this._tasks = [];
        _this._flicker = TaskMode_1.default.instance.flicker;
        return _this;
    }
    index_1 = index;
    index.prototype.start = function () {
        // StateManage.instance.on("change",this.stateChangeHandler,this);
        TaskMode_1.default.instance.on("bubbleChanged", this.bubbleChanged, this);
        this.starBar.on(cc.Node.EventType.TOUCH_END, this.startGame, this);
        this.luckyMoneyBar.on(cc.Node.EventType.TOUCH_END, this.luckyMoney, this);
        this.rankingBar.on(cc.Node.EventType.TOUCH_END, this.ranking, this);
        this.resurgenceBar.on(cc.Node.EventType.TOUCH_END, this.resurgence, this);
        this.shoppingBar.on(cc.Node.EventType.TOUCH_END, this.shopping, this);
        this.soundBar.on(cc.Node.EventType.TOUCH_END, this.sound, this);
        this.taskBar.on(cc.Node.EventType.TOUCH_END, this.task, this);
        this.initSystem();
        this.addUserData();
        this.init();
    };
    index.prototype.initSystem = function () {
        if (index_1._systemInitialized)
            return;
        index_1._systemInitialized = true;
        // 綁定弹窗事件到命令
        GameManager_1.default.context.mapEvent(GameEventNames_1.default.SHOW_ALERT, AlertCommand_1.default);
        // 商店商品点击事件
        //    GameManager
    };
    index.prototype.bubbleChanged = function (ev) {
        this._flicker = TaskMode_1.default.instance.flicker;
        this.refreshTaskState();
    };
    index.prototype.init = function () {
        if (!this._isOnLoadCalled)
            return;
        for (var i = 0; i < 3; i++) {
            var data = StateManage_1.default.instance.getData("task" + i);
            this._tasks.push(data);
        }
        // cc.log(this._flicker)
        this.refreshTaskState();
    };
    // 获取任务状态
    index.prototype.refreshTaskState = function () {
        /* let motion = 0;

        for(let i =0;i<this._tasks.length;i++){
            let data = this._tasks;

            let currentMotion:number = 0;

            // 是否领取领取
            let isgaina = StateManage.instance.getData("isgaina"+i);
            let planValue = StateManage.instance.getData(data[i]["value"]);
            cc.info("refresh", i, planValue, data[i]["goal"]);
            cc.info("isgaina=", isgaina)

            if (isgaina == 2) continue;

            if(planValue >= data[i]["goal"]){
                currentMotion = 3;
            } else {
                currentMotion = 2;
            }
            cc.log(currentMotion);
            if (currentMotion > motion) motion = currentMotion;
        } */
        var litterNode = cc.find("Canvas/controlRight/task/marvel");
        var motion = this._flicker ? 3 : 2;
        this.buMotion(litterNode, motion);
    };
    // 气泡动作
    index.prototype.buMotion = function (node, num) {
        if (num == 3) {
            var seq = cc.repeatForever(cc.sequence(cc.scaleTo(0.8, 1.1, 1.1), cc.scaleTo(0.4, 0.9, 0.9)));
            node.runAction(seq);
            node.active = true;
        }
        else if (num == 2) {
            node.active = true;
        }
        else if (num == 1) {
            node.active = false;
        }
    };
    // 开始
    index.prototype.startGame = function (e) {
        cc.director.loadScene("game");
    };
    // 红包
    index.prototype.luckyMoney = function (e) {
        cc.director.loadScene("luckyMoney");
    };
    // 排行
    index.prototype.ranking = function (e) {
        cc.director.loadScene("ranking");
    };
    // 复活
    index.prototype.resurgence = function (e) {
        cc.director.loadScene("resurgence");
    };
    // 商店
    index.prototype.shopping = function (e) {
        cc.director.loadScene("shopping");
    };
    // 音效
    index.prototype.sound = function (e) {
        cc.director.loadScene("sound");
    };
    // 任务
    index.prototype.task = function (e) {
        cc.director.loadScene("task");
    };
    // update (dt) {}
    index.prototype.onDestroy = function () {
        cc.info("@@@@@@@@@@@@@@@@@@@@ index destroied");
    };
    // 添加用户数据
    index.prototype.addUserData = function () {
        if (typeof wx == "undefined")
            return;
        for (var i = 0; i < 20; i++) {
            var score = i + 50;
            var timestamp = (new Date()).valueOf();
            wx.setUserCloudStorage({
                "KVDataList": [
                    {
                        "key": "score",
                        "value": '{"wxgame":{"score":' + score + ', "update_time":' + timestamp + '}}',
                    }
                ]
            });
        }
    };
    // 宝石 +10
    index.prototype.gem = function () {
        var gem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM) + 10;
        var tagem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM) + 10;
        cc.log(gem, "*************");
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_GEM, gem);
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TAGEM, tagem);
    };
    // 翻转次数 + 5
    index.prototype.overturn = function () {
        var overturn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_OVERTURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_OVERTURN, overturn);
    };
    // 一周转体次数 + 5
    index.prototype.turn = function () {
        var turn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TURN, turn);
    };
    // 十秒内翻转次数 + 5
    index.prototype.tmturn = function () {
        var tmturn = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TMTURN) + 5;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TMTURN, tmturn);
    };
    // 等级 + 1
    index.prototype.grade = function () {
        var grade = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TAGRADE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_GRADE, grade);
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TAGRADE, grade);
    };
    // 累计使用复活卡次数 + 1
    index.prototype.resurgenceCar = function () {
        var resurgenceCar = StateManage_1.default.instance.getData(StateManage_1.default.KEY_RESURGENCECAR) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_RESURGENCECAR, resurgenceCar);
    };
    // 好友接力次数 + 1
    index.prototype.fdrelay = function () {
        var fdrelay = StateManage_1.default.instance.getData(StateManage_1.default.KEY_FDRELAY) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_FDRELAY, fdrelay);
    };
    // 疯狂点击中点次数 + 10
    index.prototype.crazyTap = function () {
        var crazyTap = StateManage_1.default.instance.getData(StateManage_1.default.KEY_CRAZYTAP) + 10;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_CRAZYTAP, crazyTap);
    };
    // 累计任意分享 + 1
    index.prototype.anyShare = function () {
        var anyShare = StateManage_1.default.instance.getData(StateManage_1.default.KEY_ANYSHARE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_ANYSHARE, anyShare);
    };
    // 煎烤好友并分享 + 1
    index.prototype.ripeShare = function () {
        var ripeShare = StateManage_1.default.instance.getData(StateManage_1.default.KEY_RIPESHARE) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_RIPESHARE, ripeShare);
    };
    // 复活卡数量 + 1
    index.prototype.tasknuma = function () {
        ResurgenceCtrl_1.default.instance.addResurgenceCard();
    };
    // 复活卡数量 - 1
    index.prototype.tasknumb = function () {
        ResurgenceCtrl_1.default.instance.minusResurgenceCard();
    };
    // C栏剩余任务次数 + 1
    index.prototype.tasknumc = function () {
        var tasknumc = StateManage_1.default.instance.getData(StateManage_1.default.KEY_TASKNUM2) + 1;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TASKNUM2, tasknumc);
    };
    // 第二天 + 1
    index.prototype.nextDay = function () {
        // let nextDay = StateManage.instance.getData(StateManage.KEY_NEXTDAY) + 86400000;
        // StateManage.instance.setData(StateManage.KEY_NEXTDAY,nextDay)
        var toDay = new Date().getTime() + 86400000;
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_TODAY, toDay);
        cc.log(StateManage_1.default.instance.getData(StateManage_1.default.KEY_TODAY));
    };
    __decorate([
        property(cc.Node)
    ], index.prototype, "starBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "luckyMoneyBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "rankingBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "resurgenceBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "shoppingBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "soundBar", void 0);
    __decorate([
        property(cc.Node)
    ], index.prototype, "taskBar", void 0);
    index = index_1 = __decorate([
        ccclass
    ], index);
    return index;
    var index_1;
}(cc.Component));
exports.default = index;

cc._RF.pop();