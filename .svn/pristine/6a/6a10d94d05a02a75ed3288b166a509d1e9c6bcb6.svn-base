"use strict";
cc._RF.push(module, '6c0d5amoh9GAJ4/4ntC9utK', 'Shopping');
// Script/shopping/Shopping.ts

Object.defineProperty(exports, "__esModule", { value: true });
var StateManage_1 = require("../StateManage/StateManage");
var Json_1 = require("../Json/Json");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = /** @class */ (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.homeBar = null;
        _this.potBtn = null;
        _this.cakeBtn = null;
        _this.btnImg = [];
        // 弹窗节点
        _this.toast = null;
        // 购买询问节点
        _this.affirm = null;
        // 购买信息展示节点
        _this.buyInfo = null;
        // 商品价格
        _this.price = null;
        // 展示购买信息时间
        _this.isTime = false;
        _this.sumTime = 0;
        // 商品项
        _this.item = null;
        return _this;
    }
    // onLoad () {}
    NewClass.prototype.start = function () {
        // this.homeBar.on(cc.Node.EventType.TOUCH_END,this.backHome,this);
        StateManage_1.default.instance.on("change", this.stateChangeHandler, this);
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_SHOPING_TAB, 1);
        this.getData();
        var gem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
        cc.find("Canvas/pageTop/score/Label").getComponent(cc.Label).string = gem;
    };
    // 渲染商品
    NewClass.prototype.getData = function () {
        var goods = new Json_1.default().goods;
        var goodNumber = goods.length;
        var row = Math.floor(goodNumber / 3) + (goodNumber % 3 == 0 ? 0 : 1);
        // 容器的高度设置
        this.container.height = (this.item.height + 14) * row + 14;
        for (var i = 0; i < goods.length; ++i) {
            var item = cc.instantiate(this.item);
            this.container.addChild(item);
            item.active = true;
            // item.getComponent("goods").deploy = goods[i];
            this.initItem(goods[i], item);
        }
        cc.find("Canvas/shopping/scroll").getComponent(cc.ScrollView).scrollToTop(0.1);
    };
    // 初始化 item
    NewClass.prototype.initItem = function (goods, item) {
        var gem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
        var id = goods['id'];
        var skinsRes = goods['skinsRes'];
        var price = goods['price'];
        var isBuy = goods['isBuy'];
        var isUse = goods['isUse'];
        var waitBuy = goods['waitBuy'];
        var newPro = goods['newPro'];
        /**
         * 1.已购买商品 使用中 和 未 使用
         * 2.未购买商品 解锁 和 未 解锁
         */
        if (isBuy == 1) {
            if (isUse == 1) {
                cc.find("use", item).active = false;
                cc.find("inUse", item).active = true;
                cc.find("price", item).active = false;
                cc.find("prop", item).active = true;
                cc.find("lock", item).active = false;
                cc.find("msk", item).active = false;
                if (newPro == 1) {
                    cc.find("newPro", item).active = true;
                }
                else {
                    cc.find("newPro", item).active = false;
                }
                StateManage_1.default.instance.setData(StateManage_1.default.KEY_SKIN, skinsRes);
                cc.log(skinsRes, 1);
            }
            if (isUse == 2) {
                cc.find("use", item).active = true;
                cc.find("inUse", item).active = false;
                cc.find("price", item).active = false;
                cc.find("prop", item).active = true;
                cc.find("lock", item).active = false;
                cc.find("msk", item).active = false;
                if (newPro == 1) {
                    cc.find("newPro", item).active = true;
                }
                else {
                    cc.find("newPro", item).active = false;
                }
            }
        }
        else if (isBuy == 2) {
            if (waitBuy == 1) {
                cc.find("use", item).active = false;
                cc.find("inUse", item).active = false;
                cc.find("price", item).active = true;
                cc.find("prop", item).active = true;
                cc.find("lock", item).active = false;
                cc.find("msk", item).active = true;
                if (gem >= price) {
                    item.color = new cc.Color(17, 30, 131);
                }
                else {
                    item.color = new cc.Color(141, 22, 26);
                }
                if (newPro == 1) {
                    cc.find("newPro", item).active = true;
                }
                else {
                    cc.find("newPro", item).active = false;
                }
            }
            else if (waitBuy == 2) {
                cc.find("use", item).active = false;
                cc.find("inUse", item).active = false;
                cc.find("price", item).active = false;
                cc.find("prop", item).active = false;
                cc.find("lock", item).active = true;
                cc.find("msk", item).active = false;
                cc.find("newPro", item).active = false;
            }
        }
        cc.find("price/money", item).getComponent(cc.Label).string = price;
        item.getComponent("Goods")["deploy"] = goods;
    };
    // 返回首页
    NewClass.prototype.backHome = function () {
        cc.director.loadScene("indexSence");
    };
    // 锅皮肤按钮
    NewClass.prototype.potButton = function () {
        cc.log("锅皮肤");
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_SHOPING_TAB, 1);
    };
    // 饼皮肤按钮
    NewClass.prototype.cakeButton = function () {
        cc.log("饼皮肤");
        StateManage_1.default.instance.setData(StateManage_1.default.KEY_SHOPING_TAB, 2);
    };
    // 状态监听
    NewClass.prototype.stateChangeHandler = function () {
        var key = StateManage_1.default.instance.lastChangedKey;
        // 1.锅按钮 2.饼按钮 3.事件完成
        if (key == StateManage_1.default.KEY_SHOPING_TAB) {
            if (StateManage_1.default.instance.shoppingTab == 1) {
                this.potBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[1];
                this.cakeBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[0];
            }
            if (StateManage_1.default.instance.shoppingTab == 2) {
                this.potBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[0];
                this.cakeBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[1];
            }
            StateManage_1.default.instance.setData(StateManage_1.default.KEY_SHOPING_TAB, 3);
        }
        if (key == StateManage_1.default.KEY_GEM) {
            var gem = StateManage_1.default.instance.getData(StateManage_1.default.KEY_GEM);
            cc.find("Canvas/pageTop/score/Label").getComponent(cc.Label).string = gem;
        }
    };
    // 购买新皮肤
    NewClass.prototype.shopping = function (event, customEventData) {
        cc.log("购买", event.target.parent);
        this.price = Number(cc.find("money", event.target.parent).getComponent(cc.Label).string);
        this.toast = cc.find("Canvas/toast");
        this.affirm = cc.find("content/affirm", this.toast);
        this.buyInfo = cc.find("content/buyInfo", this.toast);
        this.toast.active = true;
        this.affirm.active = true;
        this.buyInfo.active = false;
    };
    NewClass.prototype.update = function (dt) {
        /* if(this.isTime){
            this.sumTime = this.sumTime + dt;
            if(this.sumTime == 1){
                this.toast.active = false;
                this.affirm.active = false;
                this.buyInfo.active = false;
                this.isTime = false;
            }
        } */
    };
    NewClass.prototype.onDestroy = function () {
        StateManage_1.default.instance.off("change", this.stateChangeHandler);
    };
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "homeBar", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "potBtn", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "cakeBtn", void 0);
    __decorate([
        property([cc.SpriteFrame])
    ], NewClass.prototype, "btnImg", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "item", void 0);
    __decorate([
        property(cc.Node)
    ], NewClass.prototype, "container", void 0);
    NewClass = __decorate([
        ccclass
    ], NewClass);
    return NewClass;
}(cc.Component));
exports.default = NewClass;

cc._RF.pop();