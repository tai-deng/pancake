import GameManager from "../gamecore/managers/GameManager";
import Json from "../Json/Json";
import GameSceneEvents from "./GameSceneEvents";
import GameEventNames from "../GameEventNames";
import GameConfig from "../GameConfig";
import DiamondMain from "./DiamondMain";
import PancakeMain from "./PancakeMain";
import PancakeStates from "./PancakeStates";

const {ccclass, property} = cc._decorator;


// 手臂类执行体
@ccclass
export default class ActionMain extends cc.Component {

    //油喷溅特效
    @property(cc.Prefab)
    oilEffectPrefab:cc.Prefab = null;

    //煎饼初始化时，离锅底的距离
    public cakeInitDistance:number = 300;

    //当前等级数据
    //请查看GameConfig中的等级数据配置
    public levelData:object;

    //钻石预制体
    @property(cc.Prefab)
    diamondPrefab:cc.Prefab = null;

    //煎饼预制体
    @property(cc.Prefab)
    pancakePrefab:cc.Prefab = null;
    
    //钻石容器
    @property(cc.Node)
    diamondContainer:cc.Node = null;
    
    //锅底碰撞体
    @property(cc.Node)
    panBottomNode:cc.Node = null;

    //手臂一段
    @property(cc.Node)
    theArm:cc.Node = null;


    //交互节点
    @property(cc.Node)
    touchNode:cc.Node = null;


    //是否正在触摸
    private _isTouching:boolean = false;


    //煎饼
    private _pancake:cc.Node;


    onLoad(){
        this.changeSkin();
    }

    start(){
        //设置可操作
        this.enableTouch = true;

        this.createNewPancake();

        //设置平板锅底相关属性
        // let panCollider:cc.PhysicsBoxCollider = this.panBottomNode.getComponent(cc.PhysicsBoxCollider);
        // panCollider.restitution = 0.2;//弹性系数
        // panCollider.friction = 0.9;//摩擦系数

        
    }


    /**
     * 创建新的蛋糕
     * 
     */
    private createNewPancake():void {
        if (this._pancake) this._pancake.removeFromParent(true);

        //删除所有钻石
        while (this._diamonds.length) {
            this._diamonds.pop().removeFromParent();
        }

        this._pancake = cc.instantiate(this.pancakePrefab);
        this._pancake.x = this.panBottomNode.x;
        this._pancake.y = this.panBottomNode.y + this.cakeInitDistance;
        this.node.addChild(this._pancake);

        //监听事件
        this._pancake.on(PancakeMain.EVENT_TOUCH_PAN, this.pancakeEventsHandler, this);
        this._pancake.on(PancakeMain.EVENT_ON_PAN, this.pancakeEventsHandler, this);
        this._pancake.on(PancakeMain.EVENT_GET_DIAMOND, this.pancakeEventsHandler, this);
        this._pancake.on(PancakeMain.EVENT_GET_SCORE, this.pancakeEventsHandler, this);
        this._pancake.on(PancakeMain.EVENT_DIE, this.pancakeEventsHandler, this);
    }

    //宝石
    private _diamonds:Array<cc.Node> = [];

    /**
     * 创建一个新的钻石
     */
    private createNewDiamond():void {
        cc.info("createNewDiamond", "@@@@@@@@@@#################");
        if (this._diamonds.length > 0) return;

        let diam:cc.Node = cc.instantiate(this.diamondPrefab);
        diam.x = this.diamondContainer.width / 2 - Math.random() * this.diamondContainer.width;
        diam.y = this.diamondContainer.height / 2 - Math.random() * this.diamondContainer.height;
        this.diamondContainer.addChild(diam);
        
        //================================================================
        //钻石数量
        //================================================================
        //请查看GameConfig中的等级数据配置
        let values:Array<number> = this.levelData["dv"] as Array<number>;
        if (values && values.length > 0) {
            let randomV:number = Math.random();
            let v:number = 0;
            cc.info('!!!!!!!!!!!!!!!!')
            for (let i:number = 0; i < values.length; i++) {
                v += values[i];
                cc.info(v, values[i], randomV)
                if (v >= randomV) {
                    diam.getComponent(DiamondMain).count = (i + 1);
                    break;
                }
            }
        }
        //================================================================

        this._diamonds.push(diam);
    }

    /**
     * 移除宝石
     */
    private removeADiamond(diam:cc.Node):void {
        let index:number = this._diamonds.indexOf(diam);
        if (index >= 0) {
            this._diamonds.splice(index, 1);
            
            // diam.removeFromParent(true);
            diam.getComponent(DiamondMain).doDisappear();
        }
    }


    //是否是第一次tap
    private _doneFirstTap:boolean;

    //开始触摸
    private touchStartHandler(e:cc.Event):void {
        cc.info("【touchStartHandler】");
        this._isTouching = true;
        this.activeCake();

        if (!this._doneFirstTap) {
            this._doneFirstTap = true;
            this.node.dispatchEvent(new cc.Event(GameSceneEvents.GAME_START, true));
        }
    }


    // 触摸结束
    private touchEndHandler(e:cc.Event):void {
        this._isTouching = false;
    }

    /**
     * 获取饼是否已激活
     */
    public get cakeActived():boolean {
        return this._pancake.getComponent(PancakeMain).actived;
    }
    

    /**
     * 激活饼
     * 
     */
    public activeCake():void {
        //让煎饼落下。
        this._pancake.getComponent(PancakeMain).active();
    }



    private _enableTouch:boolean;


    /**
     * 设置是否可操作
     */
    public set enableTouch(v:boolean) {
        cc.info("【enableTouch】", v);

        if (this._enableTouch == v) return;
        this._enableTouch = v;

        if (this._enableTouch) {
            this.touchNode.on(cc.Node.EventType.TOUCH_START, this.touchStartHandler, this);
            this.touchNode.on(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
        } else {
            this._isTouching = false;

            this.touchNode.off(cc.Node.EventType.TOUCH_START, this.touchStartHandler, this);
            this.touchNode.off(cc.Node.EventType.TOUCH_END, this.touchEndHandler, this);
        }
    }


    public get enableTouch():boolean {
        return this._enableTouch;
    }
    

    
    
    // 改变皮肤 
    private changeSkin(){
        // let resName = StateManage.instance.getData(StateManage.KEY_SKIN);
        // let res = new Json().skins;
        // let newSkin = {};
        // res.forEach(el =>{
        //     if(el["name"] == resName){
        //         newSkin = el;
        //     }
        // })
        // cc.log(resName,newSkin)

        // let currentBigArm = cc.url.raw(newSkin["bigArm"]);
        // let currentLittleArm = cc.url.raw(newSkin["lowerArm"]);
        // let currentPot = cc.url.raw(newSkin["hand"]);

        // this.arm.getChildByName("arm1").getComponent(cc.Sprite).spriteFrame.setTexture(currentBigArm);
        // this.node.getChildByName("hands").getChildByName("littleArm").getChildByName("arm2").getComponent(cc.Sprite).spriteFrame.setTexture(currentLittleArm);
        // this.node.getChildByName("hands").getChildByName("pot").getChildByName("potImg").getComponent(cc.Sprite).spriteFrame.setTexture(currentPot);
        
    }


    /**
     * 宝石数量
     */
    private _diamondCount:number = 0;

    public get diamondCount():number {
        return this._diamondCount;
    }



    //正在进行操作的分数
    private _ingScore:number = 0;

    /**
     * 分数
     */
    private _score:number = 0;

    public get score():number {
        return this._score;
    }

    /**
     * 
     * @param e
     */
    private pancakeEventsHandler(e:cc.Event):void {
        cc.info("【ActionMain pancakeEventsHandler】", e.type);

        let eType:string = e.type;
        switch (eType) {
            case PancakeMain.EVENT_TOUCH_PAN:
                //接触锅底
                let pancakeMain:PancakeMain = this._pancake.getComponent(PancakeMain);
                if (pancakeMain.state == PancakeStates.FALLING) {
                    //如果是下落过程，播放油喷溅效果
                    let point:cc.Vec2 = e["data"];
                    cc.info(point.x, point.y);
                    // let newPo:cc.Vec2 = this.node.convertToNodeSpace(point);
                    // cc.info(newPo.x, newPo.y, "@@@@@@@@");
                    this.newOilEffect(point);
                }
                break;
            case PancakeMain.EVENT_ON_PAN:
                this.createNewDiamond();

                //检查分数变化
                if (this._ingScore > this._score) {
                    this._score = this._ingScore;
                    //抛出事件
                    this.node.dispatchEvent(new cc.Event(GameSceneEvents.SCORE_CHANGED, false));
                }
                break;
            case PancakeMain.EVENT_GET_SCORE:
                let score:number = parseInt(e["data"]);
                if (!isNaN(score) && score > 0) {
                    cc.info("获得分数", score);

                    // this._score += score;
                    this._ingScore += score;

                    //抛出事件
                    //this.node.dispatchEvent(new cc.Event(GameSceneEvents.SCORE_CHANGED, false));
                }
                break;
            case PancakeMain.EVENT_GET_DIAMOND:
                let theDiamond:cc.Node = e["data"] as cc.Node;

                //每个宝石节点会携带不同数量的宝石数量
                this._diamondCount += theDiamond.getComponent(DiamondMain).count;
                cc.info("this._diamondCount", this._diamondCount);

                //移除宝石
                this.removeADiamond(theDiamond);

                //抛出事件
                this.node.dispatchEvent(new cc.Event(GameSceneEvents.DIAMONDS_CHANGED, false));
                break;
            case PancakeMain.EVENT_DIE:
                this.createNewPancake();
                break;
        }
    }


    private _oilEffects:Array<cc.Node> = [];

    /**
     * 创建一个油溅效果
     */
    private newOilEffect(po:cc.Vec2):void {
        let effect:cc.Node;
        if (this._oilEffects.length < 10) {
            effect = cc.instantiate(this.oilEffectPrefab);
            cc.director.getScene().addChild(effect)
        } else {
            effect = this._oilEffects.shift();
            effect.getComponent(cc.ParticleSystem).resetSystem();
        }
        
        this._oilEffects.push(effect);

        effect.x = po.x;
        effect.y = po.y;
        // this.node.addChild(effect);
    }

    update (dt) {
        //如果有触发
        if (this._isTouching) {
            let body:cc.RigidBody = this.theArm.getComponent(cc.RigidBody);
            body.applyLinearImpulse(new cc.Vec2(GameConfig.PANCAKE_FORCE_VALUE, 0), new cc.Vec2(0, 0), true);
            // body.applyForceToCenter(new cc.Vec2(this.forceValue, 0), true);
            // body.applyForce(new cc.Vec2(this.forceValue, 0), new cc.Vec2(0, 0), true);
        }

        // let frames:number = cc.director.getTotalFrames();
        // cc.info(frames, frames % 10);
        // if (frames % 10 == 0) {
        //     if (this._pancake) {
        //         let minY:number = this.panBottomNode.y + this.panBottomNode.height;

        //         cc.info(this._pancake.y, minY);
        //         if (this._pancake.y <  minY) {
        //             this.node.dispatchEvent(new cc.Event(GameSceneEvents.GAME_OVER, false));
        //         }
        //     }
        // }
    }


    onDestroy() {
    }
}
