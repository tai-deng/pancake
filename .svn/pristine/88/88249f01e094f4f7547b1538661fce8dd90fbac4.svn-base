"use strict";
cc._RF.push(module, '1f0eaMMHAFPv7rAL2+lIwHz', 'OpenDataManager');
// Script/OpenDataManager.ts

// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var OpenDataManager = /** @class */ (function (_super) {
    __extends(OpenDataManager, _super);
    function OpenDataManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.display = null;
        _this.tex = null;
        return _this;
    }
    // onLoad () {}
    OpenDataManager.prototype.start = function () {
        cc.info("@@@@OpenDataManager@@@@");
        this.tex = new cc.Texture2D();
        this.display = this.node.getComponent(cc.Sprite);
    };
    OpenDataManager.prototype.update = function (dt) {
        this._updaetSubDomainCanvas();
    };
    OpenDataManager.prototype._updaetSubDomainCanvas = function () {
        if (typeof wx == "undefined")
            return;
        if (!this.tex) {
            return;
        }
        this.tex.initWithElement(sharedCanvas);
        this.tex.handleLoadedTexture();
        // sharedCanvas.width = cc.winSize;
        this.display.spriteFrame = new cc.SpriteFrame(this.tex);
    };
    OpenDataManager = __decorate([
        ccclass
    ], OpenDataManager);
    return OpenDataManager;
}(cc.Component));
exports.default = OpenDataManager;

cc._RF.pop();