import StateManage from "../StateManage/StateManage";

const {ccclass, property} = cc._decorator;

@ccclass
export default class Jewel extends cc.Component {

    @property([cc.SpriteFrame])
    jewels:Array<cc.SpriteFrame> = [];
    @property(cc.Node)
    terrace:cc.Node = null;
    public newJewel:cc.SpriteFrame = null;
    private terracePos:cc.Vec2 = null;

    public create():void{
        let random = Math.floor(Math.random()*3);
        random == 3? 0 : random;
        this.newJewel = this.jewels[random];
        this.terracePos = this.terrace.getPosition();
        let x_Max = 60;
        let x_Min = -60;
        let y_Max = 200;
        let y_Min = 50;
        let x = Math.floor(Math.random()*x_Max*2 - (x_Max/2));
        let y = Math.floor(Math.random()*y_Min + y_Max);
        this.node.getComponent(cc.Sprite).spriteFrame = this.newJewel;
        this.node.setPosition(this.terracePos.x + x,this.terracePos.y + y)
        let seq = cc.repeatForever(
            cc.sequence(
                cc.moveBy(1, 0, 15),
                cc.moveBy(1, 0, -15),
        ));
        this.node.runAction(seq);
        this.node.active = true; 
    }

    onLoad(){
        // this.node.active = false;
        StateManage.instance.on("change", this.stateChangeHandler, this);
    }

    private stateChangeHandler(e:cc.Event):void {
        let key:string = StateManage.instance.lastChangedKey;

            cc.log("create@@@@@@")
            this.node.active = false;
        /* if (key == StateManage.KEY_JEWEL_STATE && StateManage.instance.jewel == 1) {
            this.create();
            cc.log("create!!!!!!!!!!!!")
            StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,2);
        } */
    }

     start(){
        //  this.create();
        StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,1)
    }
    update (dt) {
        /* if(StateManage.instance.getData(StateManage.KEY_JEWEL_STATE) == 1){
            this.create();
            StateManage.instance.setData(StateManage.KEY_JEWEL_STATE,2);
        } */
    }
}
