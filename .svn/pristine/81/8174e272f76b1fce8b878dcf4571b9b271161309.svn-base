"use strict";
cc._RF.push(module, '0a109lm4YJM+otoFiP6OIxW', 'Comp_SubDomainContent');
// Script/gamecore/components/Comp_SubDomainContent.ts

// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 显示子域内容组件。需要显示子域内容时，请挂载该组件到一个空节点
 *
 */
var Comp_SubDomainContent = /** @class */ (function (_super) {
    __extends(Comp_SubDomainContent, _super);
    function Comp_SubDomainContent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         *
         */
        _this._sharedSprite = null;
        _this._sharedTex = null;
        return _this;
    }
    // onLoad () {}
    Comp_SubDomainContent.prototype.start = function () {
        //设置节点尺寸
        var winSize = cc.director.getWinSize();
        this.node.width = winSize.width;
        this.node.height = winSize.height;
        //获取sprite组件
        this._sharedSprite = this.node.getComponent(cc.Sprite);
        if (!this._sharedSprite) {
            this._sharedSprite = this.node.addComponent(cc.Sprite);
        }
        this._sharedTex = new cc.Texture2D();
    };
    Comp_SubDomainContent.prototype.update = function (dt) {
        this.updaetSubDomainContent();
    };
    /**
     * 更新子域内容
     */
    Comp_SubDomainContent.prototype.updaetSubDomainContent = function () {
        if (typeof wx == "undefined")
            return;
        var openDataContext = wx.getOpenDataContext();
        var sharedCanvas = openDataContext.canvas;
        this._sharedTex.initWithElement(sharedCanvas);
        this._sharedTex.handleLoadedTexture();
        this._sharedSprite.spriteFrame = new cc.SpriteFrame(this._sharedTex);
        //缩放内容
        if (isNaN(this._contentScale)) {
            var w = sharedCanvas.width;
            var h = sharedCanvas.height;
            // cc.info("shared canvas width is", w);
            // cc.info("shared canvas height is", h);
            var winSize = cc.director.getWinSize();
            this._contentScale = winSize.width / w;
            this.node.scale = this._contentScale;
        }
    };
    Comp_SubDomainContent = __decorate([
        ccclass
    ], Comp_SubDomainContent);
    return Comp_SubDomainContent;
}(cc.Component));
exports.default = Comp_SubDomainContent;

cc._RF.pop();