import StateManage from "../StateManage/StateManage";
import Json from "../Json/Json";

const {ccclass, property} = cc._decorator;

@ccclass
export default class NewClass extends cc.Component {

    @property(cc.Node)
    homeBar: cc.Node = null;
    @property(cc.Node)
    potBtn:cc.Node = null;
    @property(cc.Node)
    cakeBtn:cc.Node = null;
    @property([cc.SpriteFrame])
    btnImg:Array<cc.SpriteFrame> = [];

    // 弹窗节点
    private toast:cc.Node = null;
    // 购买询问节点
    private affirm:cc.Node = null;
    // 购买信息展示节点
    private buyInfo:cc.Node = null;
    // 商品价格
    private price:number = null;
    // 展示购买信息时间
    private isTime:boolean = false;
    private sumTime:number = 0;

    // 商品项
    @property(cc.Node)
    item:cc.Node = null;
    // 容器
    @property(cc.Node)
    container:cc.Node;
    // onLoad () {}

    start () {
        this.homeBar.on(cc.Node.EventType.TOUCH_END,this.backHome,this);
        StateManage.instance.on("change",this.stateChangeHandler,this);
        StateManage.instance.setData(StateManage.KEY_SHOPING_TAB,1);
        this.getData();
        let gem = StateManage.instance.getData(StateManage.KEY_GEM);
        cc.find("Canvas/pageTop/score/Label").getComponent(cc.Label).string = gem;
    }
    // 渲染商品
    private getData(){
        let goods = new Json().goods;
        let goodNumber = goods.length;
        let row = Math.floor(goodNumber / 3) + (goodNumber % 3 == 0 ? 0 : 1);
        // 容器的高度设置
        this.container.height = (this.item.height+14) * row + 14;
        for(let i = 0;i < goods.length; ++i){
            let item = cc.instantiate(this.item);
            this.container.addChild(item);
            item.active = true;
            // item.getComponent("goods").deploy = goods[i];
            this.initItem(goods[i],item);
        }
        cc.find("Canvas/shopping/scroll").getComponent(cc.ScrollView).scrollToTop(0.1)
    }
    // 初始化 item
    public initItem(goods,item){
        let gem = StateManage.instance.getData(StateManage.KEY_GEM);
        let id = goods['id'];
        let skinsRes = goods['skinsRes'];
        let price = goods['price'];
        let isBuy = goods['isBuy'];
        let isUse = goods['isUse'];
        let waitBuy = goods['waitBuy'];
        let newPro = goods['newPro'];
        /**
         * 1.已购买商品 使用中 和 未 使用
         * 2.未购买商品 解锁 和 未 解锁
         */
        if(isBuy == 1){
            if(isUse == 1){
                cc.find("use",item).active = false;
                cc.find("inUse",item).active = true;
                cc.find("price",item).active = false;
                cc.find("prop",item).active = true;
                cc.find("lock",item).active = false;
                cc.find("msk",item).active = false;
                if(newPro == 1){
                    cc.find("newPro",item).active = true;
                }else{
                    cc.find("newPro",item).active = false;
                }
                StateManage.instance.setData(StateManage.KEY_SKIN,skinsRes);
                cc.log(skinsRes,1)
            }
            if(isUse == 2){
                cc.find("use",item).active = true;
                cc.find("inUse",item).active = false;
                cc.find("price",item).active = false;
                cc.find("prop",item).active = true;
                cc.find("lock",item).active = false;
                cc.find("msk",item).active = false;
                if(newPro == 1){
                    cc.find("newPro",item).active = true;
                }else{
                    cc.find("newPro",item).active = false;
                }
            }
        }else if(isBuy == 2){
            if(waitBuy == 1){
                cc.find("use",item).active = false;
                cc.find("inUse",item).active = false;
                cc.find("price",item).active = true;
                cc.find("prop",item).active = true;
                cc.find("lock",item).active = false;
                cc.find("msk",item).active = true;
                if(gem >= price){
                    item.color = new cc.Color(17, 30, 131);
                }else{
                    item.color = new cc.Color(141, 22, 26);
                }
                if(newPro == 1){
                    cc.find("newPro",item).active = true;
                }else{
                    cc.find("newPro",item).active = false;
                }
            }else if(waitBuy == 2){
                cc.find("use",item).active = false;
                cc.find("inUse",item).active = false;
                cc.find("price",item).active = false;
                cc.find("prop",item).active = false;
                cc.find("lock",item).active = true;
                cc.find("msk",item).active = false;
                cc.find("newPro",item).active = false;
            }
        }
        cc.find("price/money",item).getComponent(cc.Label).string = price;
        item.getComponent("goods").deploy = goods;
    }
    // 返回首页
    public backHome(){
        cc.director.loadScene("indexSence");
    }
    // 锅皮肤按钮
    public potButton(){
        StateManage.instance.setData(StateManage.KEY_SHOPING_TAB,1);
    }
    // 饼皮肤按钮
    public cakeButton(){
        StateManage.instance.setData(StateManage.KEY_SHOPING_TAB,2);
    }
    // 状态监听
    public stateChangeHandler(){
        let key:string = StateManage.instance.lastChangedKey;
        // 1.锅按钮 2.饼按钮 3.事件完成
        if(key == StateManage.KEY_SHOPING_TAB){
            if(StateManage.instance.shoppingTab == 1){
                this.potBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[1];
                this.cakeBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[0];
            }
            if(StateManage.instance.shoppingTab == 2){
                this.potBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[0];
                this.cakeBtn.getComponent(cc.Sprite).spriteFrame = this.btnImg[1];
            }
            StateManage.instance.setData(StateManage.KEY_SHOPING_TAB,3);
        }
        if(key == StateManage.KEY_GEM){
            let gem = StateManage.instance.getData(StateManage.KEY_GEM);
            cc.find("Canvas/pageTop/score/Label").getComponent(cc.Label).string = gem;
        }
    }
    // 购买新皮肤
    public shopping(event, customEventData){
        cc.log("购买",event.target.parent)
        this.price = Number(cc.find("money",event.target.parent).getComponent(cc.Label).string);
        this.toast = cc.find("Canvas/toast");
        this.affirm = cc.find("content/affirm",this.toast);
        this.buyInfo = cc.find("content/buyInfo",this.toast);

        this.toast.active = true;
        this.affirm.active = true;
        this.buyInfo.active = false;
    }
    update (dt) {
        /* if(this.isTime){
            this.sumTime = this.sumTime + dt;
            if(this.sumTime == 1){
                this.toast.active = false;
                this.affirm.active = false;
                this.buyInfo.active = false;
                this.isTime = false;
            }
        } */
    }
    onDestroy() {
        StateManage.instance.off("change", this.stateChangeHandler);
    }
}
