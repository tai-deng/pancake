
import Config from "../StateManage/StateManage";
import GameManager from "../gamecore/managers/GameManager";
import GameOverCommand from "../commands/GameOverCommand";
import StateManage from "../StateManage/StateManage";
import GameSystem from "../GameSystem";
import GameEventNames from "../GameEventNames";
import GameSceneEvents from "./GameSceneEvents";
import ActionMain from "./ActionMain";
import GameConfig from "../GameConfig";
import LevelInfoMain from "./LevelInfoMain";
const {ccclass, property} = cc._decorator;


/**
 * 游戏场景脚本
 * 
 */
@ccclass
export default class Game extends cc.Component {


    @property(cc.Prefab)
    actionPrefab:cc.Prefab = null;


    //用户等级显示
    @property(LevelInfoMain)
    levelInfo:LevelInfoMain = null;

    //分数显示
    @property(cc.Label)
    scoreLabel:cc.Label = null;

    //分数显示
    @property(cc.Node)
    tapTipNode:cc.Node = null;


    //手臂结构
    private _actionNode:cc.Node;

    //手臂结构脚本
    private _action:ActionMain;
    
    onLoad () {
        cc.info("【GameSceneMain init】");

        //初始化系统
        GameSystem.init();

        //初始化物理系统
        cc.director.getPhysicsManager().enabled = true;
        cc.director.getPhysicsManager().debugDrawFlags = 1;
    }

    start () {
        cc.info(this.node.name)
        cc.info("【GameSceneMain start】");

        //监听事件
        this.node.on(GameSceneEvents.LEVEL_CHANGED, this.levelChangedHandler, this);

        this.initAction();
        this.refreshLevel();
    }


    /**
     * 初始化手臂结构
     */
    private initAction():void {
        cc.info("【GameSceneMain initAction】");

        this._actionNode = cc.instantiate(this.actionPrefab);
        this._action = this._actionNode.getComponent(ActionMain)
        
        this._actionNode.on(GameSceneEvents.GAME_START, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents.SCORE_CHANGED, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents.DIAMONDS_CHANGED, this.actionEventsHandler, this);
        this._actionNode.on(GameSceneEvents.GAME_OVER, this.actionEventsHandler, this);
        this.node.addChild(this._actionNode);

    }


    //记录上一次宝石的数量
    private _lastDiamondCount:number = 0;

    /**
     * 
     * @param e 
     */
    private actionEventsHandler(e:cc.Event):void {
        let eType:string = e.type;

        switch (eType) {
            case GameSceneEvents.GAME_START:
                //提示不可见
                this.tapTipNode.active = false;
                break;
            case GameSceneEvents.SCORE_CHANGED:
                let score:number = this._action.score;

                //分数改变
                StateManage.instance.setData(StateManage.KEY_SCORE, score);

                //显示分数
                this.scoreLabel.string = "" + score;

                //改变位置
                this.levelInfo.node.x = this.scoreLabel.node.x + this.scoreLabel.node.width / 2 + this.levelInfo.node.width / 2 + 5;

                //刷新数据
                this.levelInfo.score = score;

                //刷新等级
                this.refreshLevel();
                break;
            case GameSceneEvents.SCORE_CHANGED:
                //宝石数量改变
                let v:number = StateManage.instance.getData(StateManage.KEY_GEM);
                v = v + this._action.diamondCount - this._lastDiamondCount;
                StateManage.instance.setData(StateManage.KEY_GEM, v );
                break;
            case GameSceneEvents.GAME_OVER:
                //游戏结束
                break;
        }
    }


    //当前等级信息
    private _currentLevelData:object = null;


    /**
     * 获取当前等级信息
     */
    public get currentLevelData():object {
        return this._currentLevelData;
    }


    /**
     * 刷新等级
     */
    private refreshLevel():void {
        let data:object;

        let score:number = this._action.score;
        for (let i:number = 0; i < GameConfig.LEVELS.length; i++) {
            let obj:object = GameConfig.LEVELS[i];
            let scoreValues:[number, number] = obj["score"];
            if (score >= scoreValues[0] && score <= scoreValues[1]) {
                data = obj;
                break;
            }
        }

        if (data && data != this._currentLevelData) {
            this._currentLevelData = data;

            //抛出事件
            this.node.dispatchEvent(new cc.Event(GameSceneEvents.LEVEL_CHANGED, false));
        }
    }



    /**
     * 等级变化回调
     * 
     * @param e 
     */
    private levelChangedHandler(e:cc.Event):void {

        //设置数据
        this.levelInfo.levelData = this._currentLevelData;
    }

    // update (dt) {
    // }


    onDestroy() {

    }
}
