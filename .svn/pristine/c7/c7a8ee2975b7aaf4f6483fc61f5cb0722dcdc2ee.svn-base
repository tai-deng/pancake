"use strict";
cc._RF.push(module, '5ff6cpM7SZKa669ht56fLzo', 'Comp_SplashScreen');
// Script/gamecore/components/Comp_SplashScreen.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameManager_1 = require("../managers/GameManager");
var LoadingSceneMain_1 = require("../scene/LoadingSceneMain");
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
/**
 * 启动屏场景。该脚本请挂载在场景下
 */
var Comp_SplashScreen = /** @class */ (function (_super) {
    __extends(Comp_SplashScreen, _super);
    function Comp_SplashScreen() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mainSceneName = "";
        _this.showTime = 2;
        _this._passedTime = 0;
        return _this;
    }
    Comp_SplashScreen.prototype.start = function () {
        this.schedule(this.doShowMainScene, 0.1);
        //预加载场景
        if (this.mainSceneName) {
            var script_1 = this;
            GameManager_1.default.sceneManager.preloadScene(this.mainSceneName, function () {
                script_1.mainSceneLoadedCallback();
            });
        }
    };
    Comp_SplashScreen.prototype.mainSceneLoadedCallback = function () {
        cc.info("【mainSceneLoadedCallback】", this);
        this._mainSceneLoaded = true;
    };
    Comp_SplashScreen.prototype.doShowMainScene = function () {
        this._passedTime += 0.1;
        if (this._passedTime > this.showTime && this._mainSceneLoaded) {
            this.unschedule(this.doShowMainScene);
            //====================================================================
            //尝试将加载场景通过动画方式移除
            //====================================================================
            //移除加载场景
            var loadingScript = this.node.getComponent(LoadingSceneMain_1.default);
            if (loadingScript) {
                cc.info("【sceneLoadedCallback】释放加载场景");
                loadingScript.doPreDestory(0.3);
                var script_2 = this;
                setTimeout(function () {
                    GameManager_1.default.sceneManager.pushScene(script_2.mainSceneName);
                }, 400);
                return;
            }
            else {
                GameManager_1.default.sceneManager.pushScene(this.mainSceneName);
            }
            //====================================================================
        }
    };
    // update (dt) {}
    Comp_SplashScreen.prototype.onDestroy = function () {
        this.unschedule(this.doShowMainScene);
    };
    __decorate([
        property({
            tooltip: "该场景过后进入的场景名称",
            displayName: "主场景名"
        })
    ], Comp_SplashScreen.prototype, "mainSceneName", void 0);
    __decorate([
        property({
            displayName: "停留时间(秒)"
        })
    ], Comp_SplashScreen.prototype, "showTime", void 0);
    Comp_SplashScreen = __decorate([
        ccclass
    ], Comp_SplashScreen);
    return Comp_SplashScreen;
}(cc.Component));
exports.default = Comp_SplashScreen;

cc._RF.pop();